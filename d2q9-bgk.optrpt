Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1] d2q9-bgk.c(160,1)
  -> INLINE: (219,5) usage(const char *)
  -> INLINE: (227,3) initialise_params_from_file(const char *, t_param *)
    -> INLINE: (742,5) die(const char *, const int, const char *)
    -> INLINE: (748,20) die(const char *, const int, const char *)
    -> INLINE: (752,20) die(const char *, const int, const char *)
    -> INLINE: (756,20) die(const char *, const int, const char *)
    -> INLINE: (760,20) die(const char *, const int, const char *)
    -> INLINE: (764,20) die(const char *, const int, const char *)
    -> INLINE: (768,20) die(const char *, const int, const char *)
    -> INLINE: (772,20) die(const char *, const int, const char *)
  -> INLINE: (232,20) calc_ncols_from_rank(int, int, int)
  -> INLINE: (236,17) create_t_speed_arrays(t_param)
  -> INLINE: (237,21) create_t_speed_arrays(t_param)
  -> INLINE: (246,19) create_t_speed_arrays(t_param)
  -> INLINE: (256,5) initialise(const char *, const char *, t_param *, t_speed_arrays **, t_speed_arrays **, int **, float **)
    -> INLINE: (1422,5) die(const char *, const int, const char *)
    -> INLINE: (1428,20) die(const char *, const int, const char *)
    -> INLINE: (1432,20) die(const char *, const int, const char *)
    -> INLINE: (1436,20) die(const char *, const int, const char *)
    -> INLINE: (1440,20) die(const char *, const int, const char *)
    -> INLINE: (1444,20) die(const char *, const int, const char *)
    -> INLINE: (1448,20) die(const char *, const int, const char *)
    -> INLINE: (1452,20) die(const char *, const int, const char *)
    -> INLINE: (1477,16) create_t_speed_arrays(t_param)
    -> INLINE: (1479,27) die(const char *, const int, const char *)
    -> INLINE: (1482,20) create_t_speed_arrays(t_param)
    -> INLINE: (1484,31) die(const char *, const int, const char *)
    -> INLINE: (1489,31) die(const char *, const int, const char *)
    -> INLINE: (1530,5) die(const char *, const int, const char *)
    -> INLINE: (1537,22) die(const char *, const int, const char *)
    -> INLINE: (1539,40) die(const char *, const int, const char *)
    -> INLINE: (1541,40) die(const char *, const int, const char *)
    -> INLINE: (1543,23) die(const char *, const int, const char *)
  -> INLINE: (262,26) calc_ncols_from_rank(int, int, int)
  -> INLINE: (269,32) calc_ncols_from_rank(int, int, int)
  -> INLINE: (270,24) start_process_grid_from(int, int, int)
    -> INLINE: (541,45) min(int, int)
  -> INLINE: (300,3) exchange_obstacles(int, int, t_param, int *, int *, int *)
  -> INLINE: (318,7) exchange_halos(int, int, t_param, t_speed_arrays *, float *, float *)
  -> (321,7) timestep_async(const t_param, t_speed_arrays **, t_speed_arrays **, int *, int, t_speed_arrays *, int, MPI_Request **)
  -> (322,24) av_velocity(const t_param, t_speed_arrays *, int *, int)
  -> INLINE: (328,7) exchange_halos_async(MPI_Request **, int, int, t_param, t_speed_arrays *, float *, float *, float *, float *)
  -> (335,26) timestep_async(const t_param, t_speed_arrays **, t_speed_arrays **, int *, int, t_speed_arrays *, int, MPI_Request **)
  -> (399,27) timestep_async(const t_param, t_speed_arrays **, t_speed_arrays **, int *, int, t_speed_arrays *, int, MPI_Request **)
  -> INLINE: (478,32) calc_ncols_from_rank(int, int, int)
  -> INLINE: (479,24) start_process_grid_from(int, int, int)
    -> INLINE: (541,45) min(int, int)
  -> INLINE: (499,5) write_values(const t_param, t_speed_arrays *, int *, float *)
    -> INLINE: (1625,5) die(const char *, const int, const char *)
    -> INLINE: (1681,5) die(const char *, const int, const char *)
  -> INLINE: (500,5) finalise(const t_param *, t_speed_arrays **, t_speed_arrays **, int **, float **)
    -> INLINE: (1567,3) free_t_speed_arrays(t_speed_arrays *)
    -> INLINE: (1570,3) free_t_speed_arrays(t_speed_arrays *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(626,3) inlined into d2q9-bgk.c(236,17)
   remark #15527: loop was not vectorized: function call to calloc(size_t, size_t) cannot be vectorized   [ d2q9-bgk.c(627,39) ]
   remark #25436: completely unrolled by 9  
LOOP END

LOOP BEGIN at d2q9-bgk.c(626,3) inlined into d2q9-bgk.c(237,21)
   remark #15527: loop was not vectorized: function call to calloc(size_t, size_t) cannot be vectorized   [ d2q9-bgk.c(627,39) ]
   remark #25436: completely unrolled by 9  
LOOP END

LOOP BEGIN at d2q9-bgk.c(626,3) inlined into d2q9-bgk.c(246,19)
   remark #15527: loop was not vectorized: function call to calloc(size_t, size_t) cannot be vectorized   [ d2q9-bgk.c(627,39) ]
   remark #25436: completely unrolled by 9  
LOOP END

LOOP BEGIN at d2q9-bgk.c(626,3) inlined into d2q9-bgk.c(256,5)
   remark #15527: loop was not vectorized: function call to calloc(size_t, size_t) cannot be vectorized   [ d2q9-bgk.c(627,39) ]
   remark #25436: completely unrolled by 9  
LOOP END

LOOP BEGIN at d2q9-bgk.c(626,3) inlined into d2q9-bgk.c(256,5)
   remark #15527: loop was not vectorized: function call to calloc(size_t, size_t) cannot be vectorized   [ d2q9-bgk.c(627,39) ]
   remark #25436: completely unrolled by 9  
LOOP END

LOOP BEGIN at d2q9-bgk.c(1496,3) inlined into d2q9-bgk.c(256,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between object_ptr->speeds[0][ii+jj*params.nx] (1501:9) and object_ptr->speeds[8][ii+jj*params.nx] (1511:9)

   LOOP BEGIN at d2q9-bgk.c(1498,5) inlined into d2q9-bgk.c(256,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between object_ptr->speeds[0][ii+jj*params.nx] (1501:9) and object_ptr->speeds[8][ii+jj*params.nx] (1511:9)
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(1516,3) inlined into d2q9-bgk.c(256,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(1518,5) inlined into d2q9-bgk.c(256,5)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at d2q9-bgk.c(1518,5) inlined into d2q9-bgk.c(256,5)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(1518,5) inlined into d2q9-bgk.c(256,5)
         remark #15300: LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(1518,5) inlined into d2q9-bgk.c(256,5)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(1534,3) inlined into d2q9-bgk.c(256,5)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at d2q9-bgk.c(261,5)
   remark #15527: loop was not vectorized: function call to malloc(size_t) cannot be vectorized   [ d2q9-bgk.c(263,45) ]
LOOP END

LOOP BEGIN at d2q9-bgk.c(268,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(272,7)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at d2q9-bgk.c(276,11)
      <Distributed chunk1>
         remark #25426: Loop Distributed (2 way) 
         remark #25444: Loopnest Interchanged: ( 1 2 ) --> ( 2 1 )
         remark #15301: PARTIAL LOOP WAS VECTORIZED   [ d2q9-bgk.c(276,11) ]

         LOOP BEGIN at d2q9-bgk.c(274,9)
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         LOOP END
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(276,11)
      <Remainder loop for vectorization, Distributed chunk1>

         LOOP BEGIN at d2q9-bgk.c(274,9)
            remark #25439: unrolled with remainder by 2  
         LOOP END

         LOOP BEGIN at d2q9-bgk.c(274,9)
         <Remainder>
         LOOP END
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(274,9)
      <Peeled loop for vectorization, Distributed chunk2>
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(274,9)
      <Distributed chunk2>
         remark #15301: PARTIAL LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(274,9)
      <Remainder loop for vectorization, Distributed chunk2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(289,3)
   remark #15523: loop was not vectorized: loop control variable col was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at d2q9-bgk.c(292,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between child_cells->speeds[speed][row*child_params.nx+col] (295:9) and child_cells->speeds[speed][row*child_params.nx+col] (295:9)

      LOOP BEGIN at d2q9-bgk.c(294,7)
         remark #25436: completely unrolled by 9   (pre-vector) 
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(560,3) inlined into d2q9-bgk.c(300,3)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 8  
LOOP END

LOOP BEGIN at d2q9-bgk.c(560,3) inlined into d2q9-bgk.c(300,3)
<Remainder>
   remark #25436: completely unrolled by 7  
LOOP END

LOOP BEGIN at d2q9-bgk.c(566,3) inlined into d2q9-bgk.c(300,3)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at d2q9-bgk.c(566,3) inlined into d2q9-bgk.c(300,3)
<Remainder>
LOOP END

LOOP BEGIN at d2q9-bgk.c(571,3) inlined into d2q9-bgk.c(300,3)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 8  
LOOP END

LOOP BEGIN at d2q9-bgk.c(571,3) inlined into d2q9-bgk.c(300,3)
<Remainder>
   remark #25436: completely unrolled by 7  
LOOP END

LOOP BEGIN at d2q9-bgk.c(577,3) inlined into d2q9-bgk.c(300,3)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at d2q9-bgk.c(577,3) inlined into d2q9-bgk.c(300,3)
<Remainder>
LOOP END

LOOP BEGIN at d2q9-bgk.c(310,3)
   remark #15523: loop was not vectorized: loop control variable tt was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at d2q9-bgk.c(645,3) inlined into d2q9-bgk.c(318,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between sbuffer_cells1[row*9+speed] (647:7) and child_cells->speeds[speed][row*child_params.nx+1] (647:7)

      LOOP BEGIN at d2q9-bgk.c(646,5) inlined into d2q9-bgk.c(318,7)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed FLOW dependence between sbuffer_cells1[row*9+speed] (647:7) and child_cells->speeds[speed][row*child_params.nx+1] (647:7)
         remark #25436: completely unrolled by 9  
      LOOP END
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(654,3) inlined into d2q9-bgk.c(318,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between child_cells->speeds[speed][row*child_params.nx+child_params.nx-1 (657:7) and child_cells->speeds[speed][row*child_params.nx+child_params.nx-1 (657:7)

      LOOP BEGIN at d2q9-bgk.c(656,5) inlined into d2q9-bgk.c(318,7)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed FLOW dependence between child_cells->speeds[speed][row*child_params.nx+child_params.nx-1 (657:7) and rbuffer_cells1[row*9+speed] (657:7)
         remark #25436: completely unrolled by 9  
      LOOP END
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(664,3) inlined into d2q9-bgk.c(318,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between sbuffer_cells1[row*9+speed] (666:7) and child_cells->speeds[speed][row*child_params.nx+child_params.nx-2 (666:7)

      LOOP BEGIN at d2q9-bgk.c(665,5) inlined into d2q9-bgk.c(318,7)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed FLOW dependence between sbuffer_cells1[row*9+speed] (666:7) and child_cells->speeds[speed][row*child_params.nx+child_params.nx-2 (666:7)
         remark #25436: completely unrolled by 9  
      LOOP END
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(672,3) inlined into d2q9-bgk.c(318,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between child_cells->speeds[speed][row*child_params.nx] (676:7) and child_cells->speeds[speed][row*child_params.nx] (676:7)

      LOOP BEGIN at d2q9-bgk.c(674,5) inlined into d2q9-bgk.c(318,7)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed FLOW dependence between child_cells->speeds[speed][row*child_params.nx] (676:7) and rbuffer_cells1[row*9+speed] (676:7)
         remark #25436: completely unrolled by 9  
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(419,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(421,7)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(421,7)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(421,7)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(421,7)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(427,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(428,7)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(428,7)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(428,7)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(428,7)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(434,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at d2q9-bgk.c(434,5)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at d2q9-bgk.c(434,5)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at d2q9-bgk.c(434,5)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at d2q9-bgk.c(434,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at d2q9-bgk.c(463,3)
   remark #15523: loop was not vectorized: loop control variable col was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at d2q9-bgk.c(466,7)
   <Distributed chunk1>
      remark #25426: Loop Distributed (2 way) 
      remark #25444: Loopnest Interchanged: ( 1 2 ) --> ( 2 1 )
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override    [ d2q9-bgk.c(466,7) ]

      LOOP BEGIN at d2q9-bgk.c(464,5)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(464,5)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(464,5)
   <Distributed chunk2>
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(464,5)
   <Remainder, Distributed chunk2>
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(477,5)
   remark #15523: loop was not vectorized: loop control variable process was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at d2q9-bgk.c(480,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details

      LOOP BEGIN at d2q9-bgk.c(484,9)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed OUTPUT dependence between cells->speeds[speed][row*params.nx+col] (489:13) and cells->speeds[speed][row*params.nx+col] (489:13)

         LOOP BEGIN at d2q9-bgk.c(487,11)
            remark #25436: completely unrolled by 9   (pre-vector) 
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(1628,3) inlined into d2q9-bgk.c(499,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (1671:7) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (1671:7)

   LOOP BEGIN at d2q9-bgk.c(1630,5) inlined into d2q9-bgk.c(499,5)
      remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(1671,7) ]

      LOOP BEGIN at d2q9-bgk.c(1643,9) inlined into d2q9-bgk.c(499,5)
         remark #25436: completely unrolled by 9   (pre-vector) 
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(1684,3) inlined into d2q9-bgk.c(499,5)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(1686,5) ]
LOOP END

LOOP BEGIN at d2q9-bgk.c(633,3) inlined into d2q9-bgk.c(500,5)
   remark #15527: loop was not vectorized: function call to free(void *) cannot be vectorized   [ d2q9-bgk.c(634,5) ]
   remark #25436: completely unrolled by 9  
LOOP END

LOOP BEGIN at d2q9-bgk.c(633,3) inlined into d2q9-bgk.c(500,5)
   remark #15527: loop was not vectorized: function call to free(void *) cannot be vectorized   [ d2q9-bgk.c(634,5) ]
   remark #25436: completely unrolled by 9  
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(1520,9):remark #34026: call to memset implemented as a call to optimized library version
d2q9-bgk.c(321,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(322,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(160,1):remark #34051: REGISTER ALLOCATION : [main] d2q9-bgk.c:160

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   25[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm10]
        
    Routine temporaries
        Total         :    2240
            Global    :     568
            Local     :    1672
        Regenerable   :     593
        Spilled       :     128
        
    Routine stack
        Variables     :    3484 bytes*
            Reads     :     119 [2.56e+02 ~ 0.7%]
            Writes    :      25 [1.34e+01 ~ 0.0%]
        Spills        :     960 bytes*
            Reads     :     350 [2.10e+03 ~ 5.8%]
            Writes    :     197 [5.69e+02 ~ 1.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: timestep_async(const t_param, t_speed_arrays **, t_speed_arrays **, int *, int, t_speed_arrays *, int, MPI_Request **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (timestep_async(const t_param, t_speed_arrays **, t_speed_arrays **, int *, int, t_speed_arrays *, int, MPI_Request **)) [2] d2q9-bgk.c(798,1)
  -> INLINE: (801,5) accelerate_flow(const t_param, t_speed_arrays *, int *, int)
  -> (804,13) merged_timestep_ops(const t_param, t_speed_arrays *, t_speed_arrays *, int *, int)
  -> INLINE: (818,7) propagate(const t_param, t_speed_arrays *, t_speed_arrays *, int)
  -> INLINE: (819,7) rebound(const t_param, t_speed_arrays *, t_speed_arrays *, int *, int)
  -> CP_CLONE (820,7) collision..1(const t_param, t_speed_arrays *, t_speed_arrays *, int *, int)
  -> INLINE: (825,7) accelerate_flow(const t_param, t_speed_arrays *, int *, int)
  -> (826,13) merged_timestep_ops(const t_param, t_speed_arrays *, t_speed_arrays *, int *, int)
  -> INLINE: (831,9) swap_cells_arrays(t_speed_arrays *, t_speed_arrays *, int, int)
    -> INLINE: (532,5) swap_floats(float *, float *)
  -> INLINE: (832,9) swap_cells_arrays(t_speed_arrays *, t_speed_arrays *, int, int)
    -> INLINE: (532,5) swap_floats(float *, float *)
  -> INLINE: (835,7) accelerate_flow(const t_param, t_speed_arrays *, int *, int)
  -> INLINE: (836,7) propagate(const t_param, t_speed_arrays *, t_speed_arrays *, int)
  -> INLINE: (842,7) rebound(const t_param, t_speed_arrays *, t_speed_arrays *, int *, int)
  -> CP_CLONE (843,7) collision..0(const t_param, t_speed_arrays *, t_speed_arrays *, int *, int)
  -> INLINE: (853,5) accelerate_flow(const t_param, t_speed_arrays *, int *, int)
  -> (854,11) merged_timestep_ops(const t_param, t_speed_arrays *, t_speed_arrays *, int *, int)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(893,3) inlined into d2q9-bgk.c(801,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between *(cells->speeds[1]+(ii+jj*params.nx)*4) (903:7) and *(cells->speeds[7]+(ii+jj*params.nx)*4) (909:7)
LOOP END

LOOP BEGIN at d2q9-bgk.c(893,3) inlined into d2q9-bgk.c(825,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between *(cells->speeds[1]+(ii+jj*params.nx)*4) (903:7) and *(cells->speeds[7]+(ii+jj*params.nx)*4) (909:7)
LOOP END

LOOP BEGIN at d2q9-bgk.c(893,3) inlined into d2q9-bgk.c(853,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between *(cells->speeds[1]+(ii+jj*params.nx)*4) (903:7) and *(cells->speeds[7]+(ii+jj*params.nx)*4) (909:7)
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(804,13):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(826,13):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(854,11):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(798,1):remark #34051: REGISTER ALLOCATION : [timestep_async] d2q9-bgk.c:798

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rbx rbp rsi rdi r8-r11 r13-r15 zmm0-zmm8]
        
    Routine temporaries
        Total         :     180
            Global    :      54
            Local     :     126
        Regenerable   :      20
        Spilled       :       5
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      24 bytes*
            Reads     :       4 [1.20e+00 ~ 0.9%]
            Writes    :       4 [1.20e+00 ~ 0.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: collision..0(const t_param, t_speed_arrays *, t_speed_arrays *, int *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (collision..0(const t_param, t_speed_arrays *, t_speed_arrays *, int *, int)) [3] d2q9-bgk.c(1220,1)
  CLONED FROM: collision(const t_param, t_speed_arrays *, t_speed_arrays *, int *, int)(X,X,X,X,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(1244,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(1246,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at d2q9-bgk.c(1257,9)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #25436: completely unrolled by 9  
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(1312,9)
         remark #15301: MATERIALIZED LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(1326,9)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed FLOW dependence between cells->speeds[kk][ii+jj*params.nx] (1328:11) and tmp_cells->speeds[kk][ii+jj*params.nx] (1328:11)
         remark #25436: completely unrolled by 9  
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(1220,1):remark #34051: REGISTER ALLOCATION : [collision..0] d2q9-bgk.c:1220

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   31[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     200
            Global    :      29
            Local     :     171
        Regenerable   :      15
        Spilled       :       9
        
    Routine stack
        Variables     :      72 bytes*
            Reads     :       3 [3.75e+01 ~ 1.4%]
            Writes    :      14 [1.75e+02 ~ 6.5%]
        Spills        :      72 bytes*
            Reads     :       9 [1.84e+01 ~ 0.7%]
            Writes    :       9 [4.83e+01 ~ 1.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: collision..1(const t_param, t_speed_arrays *, t_speed_arrays *, int *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (collision..1(const t_param, t_speed_arrays *, t_speed_arrays *, int *, int)) [4] d2q9-bgk.c(1220,1)
  CLONED FROM: collision(const t_param, t_speed_arrays *, t_speed_arrays *, int *, int)(X,X,X,X,0)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(1244,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(1246,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at d2q9-bgk.c(1257,9)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #25436: completely unrolled by 9  
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(1312,9)
         remark #15301: MATERIALIZED LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(1326,9)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed FLOW dependence between cells->speeds[kk][ii+jj*params.nx] (1328:11) and tmp_cells->speeds[kk][ii+jj*params.nx] (1328:11)
         remark #25436: completely unrolled by 9  
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(1220,1):remark #34051: REGISTER ALLOCATION : [collision..1] d2q9-bgk.c:1220

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   31[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     201
            Global    :      30
            Local     :     171
        Regenerable   :      15
        Spilled       :      10
        
    Routine stack
        Variables     :      72 bytes*
            Reads     :       3 [3.75e+01 ~ 1.4%]
            Writes    :      14 [1.75e+02 ~ 6.6%]
        Spills        :      80 bytes*
            Reads     :      10 [2.34e+01 ~ 0.9%]
            Writes    :      10 [2.34e+01 ~ 0.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: merged_timestep_ops(const t_param, t_speed_arrays *, t_speed_arrays *, int *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (merged_timestep_ops(const t_param, t_speed_arrays *, t_speed_arrays *, int *, int)) [5] d2q9-bgk.c(964,149)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(987,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(989,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at d2q9-bgk.c(1031,9)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #25436: completely unrolled by 9  
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(1052,9)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #25436: completely unrolled by 9  
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(1107,9)
         remark #15301: MATERIALIZED LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(1121,9)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed FLOW dependence between tmp_cells->speeds[kk][ii+jj*params.nx] (1123:11) and tmp_cells->speeds[kk][ii+jj*params.nx] (1123:11)
         remark #25436: completely unrolled by 9  
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(964,149):remark #34051: REGISTER ALLOCATION : [merged_timestep_ops] d2q9-bgk.c:964

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   31[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     268
            Global    :      70
            Local     :     198
        Regenerable   :      15
        Spilled       :      48
        
    Routine stack
        Variables     :      72 bytes*
            Reads     :       3 [3.75e+01 ~ 0.8%]
            Writes    :      14 [1.75e+02 ~ 3.8%]
        Spills        :     360 bytes*
            Reads     :      71 [8.95e+02 ~ 19.6%]
            Writes    :      53 [2.57e+02 ~ 5.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: av_velocity(const t_param, t_speed_arrays *, int *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (av_velocity(const t_param, t_speed_arrays *, int *, int)) [6] d2q9-bgk.c(1340,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(1363,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive   [ d2q9-bgk.c(1365,5) ]

   LOOP BEGIN at d2q9-bgk.c(1365,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between ii (1365:36) and ii (1368:7)

      LOOP BEGIN at d2q9-bgk.c(1373,9)
         remark #25436: completely unrolled by 9   (pre-vector) 
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(1340,1):remark #34051: REGISTER ALLOCATION : [av_velocity] d2q9-bgk.c:1340

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     105
            Global    :      28
            Local     :      77
        Regenerable   :       4
        Spilled       :      16
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     112 bytes*
            Reads     :      17 [1.61e+02 ~ 13.2%]
            Writes    :      14 [3.78e+01 ~ 3.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: swap_floats(float *, float *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (swap_floats(float *, float *)) [7] d2q9-bgk.c(518,44)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(518,44):remark #34051: REGISTER ALLOCATION : [swap_floats] d2q9-bgk.c:518

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rsi rdi]
        
    Routine temporaries
        Total         :      12
            Global    :       0
            Local     :      12
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: swap_cells(t_speed *, t_speed *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (swap_cells(t_speed *, t_speed *)) [8] d2q9-bgk.c(524,47)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(525,19):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (16, 0)
d2q9-bgk.c(526,12):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(527,11):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(524,47):remark #34051: REGISTER ALLOCATION : [swap_cells] d2q9-bgk.c:524

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rsi rdi zmm0-zmm3]
        
    Routine temporaries
        Total         :      16
            Global    :       0
            Local     :      16
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: swap_cells_arrays(t_speed_arrays *, t_speed_arrays *, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (swap_cells_arrays(t_speed_arrays *, t_speed_arrays *, int, int)) [9] d2q9-bgk.c(530,92)
  -> INLINE: (532,5) swap_floats(float *, float *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(531,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between *var1 (519:17) and *var2 (521:4)
   remark #25436: completely unrolled by 9  
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(530,92):remark #34051: REGISTER ALLOCATION : [swap_cells_arrays] d2q9-bgk.c:530

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r8-r11]
        
    Routine temporaries
        Total         :      52
            Global    :       0
            Local     :      52
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: start_process_grid_from(int, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (start_process_grid_from(int, int, int)) [10] d2q9-bgk.c(536,56)
  -> INLINE: (541,45) min(int, int)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(536,56):remark #34051: REGISTER ALLOCATION : [start_process_grid_from] d2q9-bgk.c:536

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rsi rdi]
        
    Routine temporaries
        Total         :      22
            Global    :       0
            Local     :      22
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: min(int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (min(int, int)) [11] d2q9-bgk.c(550,23)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(550,23):remark #34051: REGISTER ALLOCATION : [min] d2q9-bgk.c:550

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rsi rdi]
        
    Routine temporaries
        Total         :      12
            Global    :       0
            Local     :      12
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: exchange_obstacles(int, int, t_param, int *, int *, int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (exchange_obstacles(int, int, t_param, int *, int *, int *)) [12] d2q9-bgk.c(555,71)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(560,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between sbuffer_obstacles[row] (561:5) and child_obstacles[row*child_params.nx+1] (561:5)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at d2q9-bgk.c(560,3)
<Remainder>
LOOP END

LOOP BEGIN at d2q9-bgk.c(566,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between child_obstacles[row*child_params.nx+child_params.nx-1] (567:5) and rbuffer_obstacles[row] (567:5)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at d2q9-bgk.c(566,3)
<Remainder>
LOOP END

LOOP BEGIN at d2q9-bgk.c(571,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between sbuffer_obstacles[row] (572:5) and child_obstacles[row*child_params.nx+child_params.nx-2] (572:5)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at d2q9-bgk.c(571,3)
<Remainder>
LOOP END

LOOP BEGIN at d2q9-bgk.c(577,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between child_obstacles[row*child_params.nx] (578:5) and rbuffer_obstacles[row] (578:5)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at d2q9-bgk.c(577,3)
<Remainder>
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(555,71):remark #34051: REGISTER ALLOCATION : [exchange_obstacles] d2q9-bgk.c:555

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     135
            Global    :      49
            Local     :      86
        Regenerable   :      17
        Spilled       :      10
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :       6 [5.60e+00 ~ 1.9%]
            Writes    :       6 [5.60e+00 ~ 1.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: exchange_halos_async(MPI_Request **, int, int, t_param, t_speed_arrays *, float *, float *, float *, float *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (exchange_halos_async(MPI_Request **, int, int, t_param, t_speed_arrays *, float *, float *, float *, float *)) [13] d2q9-bgk.c(585,69)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(593,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between sbuffer_cells1[row*3] (595:9) and child_cells->speeds[7][row*child_params.nx+1] (597:9)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at d2q9-bgk.c(593,3)
<Remainder>
LOOP END

LOOP BEGIN at d2q9-bgk.c(609,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between sbuffer_cells2[row*3] (611:7) and child_cells->speeds[8][row*child_params.nx+child_params.nx-2] (613:7)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at d2q9-bgk.c(609,3)
<Remainder>
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(585,69):remark #34051: REGISTER ALLOCATION : [exchange_halos_async] d2q9-bgk.c:585

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     133
            Global    :      38
            Local     :      95
        Regenerable   :      14
        Spilled       :      10
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :       4 [3.70e+00 ~ 1.4%]
            Writes    :       4 [3.70e+00 ~ 1.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: create_t_speed_arrays(t_param)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (create_t_speed_arrays(t_param)) [14] d2q9-bgk.c(624,55)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(626,3)
   remark #15527: loop was not vectorized: function call to calloc(size_t, size_t) cannot be vectorized   [ d2q9-bgk.c(627,39) ]
   remark #25436: completely unrolled by 9  
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(624,55):remark #34051: REGISTER ALLOCATION : [create_t_speed_arrays] d2q9-bgk.c:624

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rsi rdi r14]
        
    Routine temporaries
        Total         :      74
            Global    :      26
            Local     :      48
        Regenerable   :      20
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: free_t_speed_arrays(t_speed_arrays *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (free_t_speed_arrays(t_speed_arrays *)) [15] d2q9-bgk.c(632,47)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(633,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between call:free(void *) (634:5) and obj->speeds (634:5)
   remark #25436: completely unrolled by 9  
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(632,47):remark #34051: REGISTER ALLOCATION : [free_t_speed_arrays] d2q9-bgk.c:632

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rdi r14]
        
    Routine temporaries
        Total         :      27
            Global    :       7
            Local     :      20
        Regenerable   :       0
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: exchange_halos(int, int, t_param, t_speed_arrays *, float *, float *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (exchange_halos(int, int, t_param, t_speed_arrays *, float *, float *)) [16] d2q9-bgk.c(640,67)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(645,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between sbuffer_cells[row*9+speed] (647:7) and child_cells->speeds[speed][row*child_params.nx+1] (647:7)

   LOOP BEGIN at d2q9-bgk.c(646,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between sbuffer_cells[row*9+speed] (647:7) and child_cells->speeds[speed][row*child_params.nx+1] (647:7)
      remark #25436: completely unrolled by 9  
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(654,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between child_cells->speeds[speed][row*child_params.nx+child_params.nx-1 (657:7) and child_cells->speeds[speed][row*child_params.nx+child_params.nx-1 (657:7)

   LOOP BEGIN at d2q9-bgk.c(656,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between child_cells->speeds[speed][row*child_params.nx+child_params.nx-1 (657:7) and rbuffer_cells[row*9+speed] (657:7)
      remark #25436: completely unrolled by 9  
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(664,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between sbuffer_cells[row*9+speed] (666:7) and child_cells->speeds[speed][row*child_params.nx+child_params.nx-2 (666:7)

   LOOP BEGIN at d2q9-bgk.c(665,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between sbuffer_cells[row*9+speed] (666:7) and child_cells->speeds[speed][row*child_params.nx+child_params.nx-2 (666:7)
      remark #25436: completely unrolled by 9  
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(672,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between child_cells->speeds[speed][row*child_params.nx] (676:7) and child_cells->speeds[speed][row*child_params.nx] (676:7)

   LOOP BEGIN at d2q9-bgk.c(674,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between child_cells->speeds[speed][row*child_params.nx] (676:7) and rbuffer_cells[row*9+speed] (676:7)
      remark #25436: completely unrolled by 9  
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(640,67):remark #34051: REGISTER ALLOCATION : [exchange_halos] d2q9-bgk.c:640

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     139
            Global    :      61
            Local     :      78
        Regenerable   :      14
        Spilled       :      17
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      88 bytes*
            Reads     :      21 [1.93e+01 ~ 3.0%]
            Writes    :      14 [1.28e+01 ~ 2.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: output_state(const char *, int, t_speed_arrays *, int *, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (output_state(const char *, int, t_speed_arrays *, int *, int, int)) [17] d2q9-bgk.c(682,109)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(690,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (693:9) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (697:5)

   LOOP BEGIN at d2q9-bgk.c(691,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (693:9) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (695:7)

      LOOP BEGIN at d2q9-bgk.c(692,7)
         remark #25436: completely unrolled by 9   (pre-vector) 
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(699,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (701:7) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (703:5)

   LOOP BEGIN at d2q9-bgk.c(700,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (701:7) and obstacles[i*nx+j] (701:7)
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(682,109):remark #34051: REGISTER ALLOCATION : [output_state] d2q9-bgk.c:682

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r15 zmm0]
        
    Routine temporaries
        Total         :     124
            Global    :      27
            Local     :      97
        Regenerable   :      37
        Spilled       :      12
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       9 [3.50e+01 ~ 1.4%]
            Writes    :       8 [2.41e+01 ~ 1.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: calc_ncols_from_rank(int, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (calc_ncols_from_rank(int, int, int)) [18] d2q9-bgk.c(710,1)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(710,1):remark #34051: REGISTER ALLOCATION : [calc_ncols_from_rank] d2q9-bgk.c:710

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    5[ rax rdx rcx rsi rdi]
        
    Routine temporaries
        Total         :      21
            Global    :       0
            Local     :      21
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: timestep(const t_param, t_speed_arrays **, t_speed_arrays **, int *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (timestep(const t_param, t_speed_arrays **, t_speed_arrays **, int *, int)) [19] d2q9-bgk.c(779,1)
  -> INLINE: (780,3) accelerate_flow(const t_param, t_speed_arrays *, int *, int)
  -> INLINE: (782,3) propagate(const t_param, t_speed_arrays *, t_speed_arrays *, int)
  -> INLINE: (783,3) rebound(const t_param, t_speed_arrays *, t_speed_arrays *, int *, int)
  -> (784,3) collision(const t_param, t_speed_arrays *, t_speed_arrays *, int *, int)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(893,3) inlined into d2q9-bgk.c(780,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between *(cells->speeds[1]+(ii+jj*params.nx)*4) (903:7) and *(cells->speeds[7]+(ii+jj*params.nx)*4) (909:7)
LOOP END

LOOP BEGIN at d2q9-bgk.c(933,3) inlined into d2q9-bgk.c(782,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between tmp_cells->speeds[0][ii+jj*params.nx] (949:7) and tmp_cells->speeds[8][ii+jj*params.nx] (957:7)

   LOOP BEGIN at d2q9-bgk.c(935,5) inlined into d2q9-bgk.c(782,3)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(1182,3) inlined into d2q9-bgk.c(783,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between cells->speeds[1][ii+jj*params.nx] (1194:9) and cells->speeds[8][ii+jj*params.nx] (1201:9)

   LOOP BEGIN at d2q9-bgk.c(1184,5) inlined into d2q9-bgk.c(783,3)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(784,3):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(779,1):remark #34051: REGISTER ALLOCATION : [timestep] d2q9-bgk.c:779

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   24[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm8]
        
    Routine temporaries
        Total         :     196
            Global    :      63
            Local     :     133
        Regenerable   :      12
        Spilled       :      31
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     200 bytes*
            Reads     :      33 [3.91e+02 ~ 15.1%]
            Writes    :      29 [9.41e+01 ~ 3.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: collision(const t_param, t_speed_arrays *, t_speed_arrays *, int *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (collision(const t_param, t_speed_arrays *, t_speed_arrays *, int *, int)) [20] d2q9-bgk.c(1220,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(1244,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(1246,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at d2q9-bgk.c(1257,9)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #25436: completely unrolled by 9  
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(1312,9)
         remark #15301: MATERIALIZED LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(1326,9)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed FLOW dependence between cells->speeds[kk][ii+jj*params.nx] (1328:11) and tmp_cells->speeds[kk][ii+jj*params.nx] (1328:11)
         remark #25436: completely unrolled by 9  
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(1220,1):remark #34051: REGISTER ALLOCATION : [collision] d2q9-bgk.c:1220

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   31[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     208
            Global    :      33
            Local     :     175
        Regenerable   :      16
        Spilled       :      20
        
    Routine stack
        Variables     :      72 bytes*
            Reads     :       3 [3.75e+01 ~ 1.3%]
            Writes    :      14 [1.75e+02 ~ 6.0%]
        Spills        :     144 bytes*
            Reads     :      19 [1.80e+02 ~ 6.2%]
            Writes    :      18 [1.07e+02 ~ 3.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: accelerate_flow(const t_param, t_speed_arrays *, int *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (accelerate_flow(const t_param, t_speed_arrays *, int *, int)) [21] d2q9-bgk.c(866,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(893,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between *(cells->speeds[1]+(ii+jj*params.nx)*4) (903:7) and *(cells->speeds[7]+(ii+jj*params.nx)*4) (909:7)
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(866,1):remark #34051: REGISTER ALLOCATION : [accelerate_flow] d2q9-bgk.c:866

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rsi rdi r8-r12 zmm0-zmm8]
        
    Routine temporaries
        Total         :      59
            Global    :      23
            Local     :      36
        Regenerable   :       6
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [9.00e-01 ~ 0.9%]
            Writes    :       1 [9.00e-01 ~ 0.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: propagate(const t_param, t_speed_arrays *, t_speed_arrays *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (propagate(const t_param, t_speed_arrays *, t_speed_arrays *, int)) [22] d2q9-bgk.c(917,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(933,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between tmp_cells->speeds[0][ii+jj*params.nx] (949:7) and tmp_cells->speeds[8][ii+jj*params.nx] (957:7)

   LOOP BEGIN at d2q9-bgk.c(935,5)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(917,1):remark #34051: REGISTER ALLOCATION : [propagate] d2q9-bgk.c:917

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :      95
            Global    :      43
            Local     :      52
        Regenerable   :       5
        Spilled       :      30
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     224 bytes*
            Reads     :      29 [3.84e+02 ~ 23.9%]
            Writes    :      29 [9.05e+01 ~ 5.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: rebound(const t_param, t_speed_arrays *, t_speed_arrays *, int *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (rebound(const t_param, t_speed_arrays *, t_speed_arrays *, int *, int)) [23] d2q9-bgk.c(1166,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(1182,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between cells->speeds[1][ii+jj*params.nx] (1194:9) and cells->speeds[8][ii+jj*params.nx] (1201:9)

   LOOP BEGIN at d2q9-bgk.c(1184,5)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(1166,1):remark #34051: REGISTER ALLOCATION : [rebound] d2q9-bgk.c:1166

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :      69
            Global    :      21
            Local     :      48
        Regenerable   :       5
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      40 bytes*
            Reads     :       5 [8.10e+00 ~ 0.9%]
            Writes    :       5 [8.10e+00 ~ 0.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: test_vels(const char *, float *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (test_vels(const char *, float *, int)) [24] d2q9-bgk.c(1209,65)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(1211,3)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(1213,5) ]
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(1209,65):remark #34051: REGISTER ALLOCATION : [test_vels] d2q9-bgk.c:1209

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rsi rdi r12-r15 zmm0]
        
    Routine temporaries
        Total         :      26
            Global    :      12
            Local     :      14
        Regenerable   :       5
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      16 bytes*
            Reads     :       2 [1.80e+00 ~ 2.1%]
            Writes    :       2 [1.80e+00 ~ 2.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: finalise(const t_param *, t_speed_arrays **, t_speed_arrays **, int **, float **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (finalise(const t_param *, t_speed_arrays **, t_speed_arrays **, int **, float **)) [25] d2q9-bgk.c(1563,1)
  -> INLINE: (1567,3) free_t_speed_arrays(t_speed_arrays *)
  -> INLINE: (1570,3) free_t_speed_arrays(t_speed_arrays *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(633,3) inlined into d2q9-bgk.c(1567,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between call:free(void *) (634:5) and obj->speeds (634:5)
   remark #25436: completely unrolled by 9  
LOOP END

LOOP BEGIN at d2q9-bgk.c(633,3) inlined into d2q9-bgk.c(1570,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between call:free(void *) (634:5) and obj->speeds (634:5)
   remark #25436: completely unrolled by 9  
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(1563,1):remark #34051: REGISTER ALLOCATION : [finalise] d2q9-bgk.c:1563

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rbp rsi rdi r8 r12-r13 r15]
        
    Routine temporaries
        Total         :      60
            Global    :      12
            Local     :      48
        Regenerable   :       1
        Spilled       :       5
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: calc_reynolds(const t_param, t_speed_arrays *, int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (calc_reynolds(const t_param, t_speed_arrays *, int *)) [26] d2q9-bgk.c(1584,1)
  -> INLINE: (1587,12) av_velocity(const t_param, t_speed_arrays *, int *, int)
  -> INLINE: (1588,12) av_velocity(const t_param, t_speed_arrays *, int *, int)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(1363,3) inlined into d2q9-bgk.c(1587,12)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 

   LOOP BEGIN at d2q9-bgk.c(1365,5) inlined into d2q9-bgk.c(1587,12)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 

      LOOP BEGIN at d2q9-bgk.c(1373,9) inlined into d2q9-bgk.c(1587,12)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #25436: completely unrolled by 9  
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(1363,3) inlined into d2q9-bgk.c(1588,12)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 

   LOOP BEGIN at d2q9-bgk.c(1365,5) inlined into d2q9-bgk.c(1588,12)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 

      LOOP BEGIN at d2q9-bgk.c(1373,9) inlined into d2q9-bgk.c(1588,12)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #25436: completely unrolled by 9  
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(1584,1):remark #34051: REGISTER ALLOCATION : [calc_reynolds] d2q9-bgk.c:1584

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   29[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm13]
        
    Routine temporaries
        Total         :     159
            Global    :      33
            Local     :     126
        Regenerable   :       5
        Spilled       :      11
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      40 bytes*
            Reads     :       5 [1.89e+01 ~ 1.0%]
            Writes    :       5 [1.89e+01 ~ 1.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: total_density(const t_param, t_speed_arrays *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (total_density(const t_param, t_speed_arrays *)) [27] d2q9-bgk.c(1594,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(1601,7)
   remark #25444: Loopnest Interchanged: ( 1 2 3 ) --> ( 3 1 2 )
   remark #15542: loop was not vectorized: inner loop was already vectorized   [ d2q9-bgk.c(1601,7) ]

   LOOP BEGIN at d2q9-bgk.c(1597,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at d2q9-bgk.c(1599,5)
         remark #15301: PERMUTED LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(1599,5)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(1594,1):remark #34051: REGISTER ALLOCATION : [total_density] d2q9-bgk.c:1594

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbp rsi rdi r8-r12 zmm0-zmm3]
        
    Routine temporaries
        Total         :      33
            Global    :      22
            Local     :      11
        Regenerable   :       4
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: write_values(const t_param, t_speed_arrays *, int *, float *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (write_values(const t_param, t_speed_arrays *, int *, float *)) [28] d2q9-bgk.c(1612,1)
  -> INLINE: (1625,5) die(const char *, const int, const char *)
  -> INLINE: (1681,5) die(const char *, const int, const char *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(1628,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between cells->speeds[kk][ii+jj*params.nx] (1645:11) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (1671:7)

   LOOP BEGIN at d2q9-bgk.c(1630,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between cells->speeds[kk][ii+jj*params.nx] (1645:11) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (1671:7)

      LOOP BEGIN at d2q9-bgk.c(1643,9)
         remark #25436: completely unrolled by 9   (pre-vector) 
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(1684,3)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(1686,5) ]
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(1612,1):remark #34051: REGISTER ALLOCATION : [write_values] d2q9-bgk.c:1612

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   26[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm10]
        
    Routine temporaries
        Total         :     159
            Global    :      37
            Local     :     122
        Regenerable   :      46
        Spilled       :      12
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      56 bytes*
            Reads     :       9 [7.87e+01 ~ 5.0%]
            Writes    :       7 [1.71e+01 ~ 1.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: die(const char *, const int, const char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (die(const char *, const int, const char *)) [29] d2q9-bgk.c(1695,1)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(1695,1):remark #34051: REGISTER ALLOCATION : [die] d2q9-bgk.c:1695

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rbx rsi rdi]
        
    Routine temporaries
        Total         :      28
            Global    :       1
            Local     :      27
        Regenerable   :       7
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: usage(const char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (usage(const char *)) [30] d2q9-bgk.c(1703,1)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(1703,1):remark #34051: REGISTER ALLOCATION : [usage] d2q9-bgk.c:1703

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rsi rdi]
        
    Routine temporaries
        Total         :      15
            Global    :       0
            Local     :      15
        Regenerable   :       4
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: initialise(const char *, const char *, t_param *, t_speed_arrays **, t_speed_arrays **, int **, float **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (initialise(const char *, const char *, t_param *, t_speed_arrays **, t_speed_arrays **, int **, float **)) [31] d2q9-bgk.c(1409,1)
  -> INLINE: (1422,5) die(const char *, const int, const char *)
  -> INLINE: (1428,20) die(const char *, const int, const char *)
  -> INLINE: (1432,20) die(const char *, const int, const char *)
  -> INLINE: (1436,20) die(const char *, const int, const char *)
  -> INLINE: (1440,20) die(const char *, const int, const char *)
  -> INLINE: (1444,20) die(const char *, const int, const char *)
  -> INLINE: (1448,20) die(const char *, const int, const char *)
  -> INLINE: (1452,20) die(const char *, const int, const char *)
  -> INLINE: (1477,16) create_t_speed_arrays(t_param)
  -> INLINE: (1479,27) die(const char *, const int, const char *)
  -> INLINE: (1482,20) create_t_speed_arrays(t_param)
  -> INLINE: (1484,31) die(const char *, const int, const char *)
  -> INLINE: (1489,31) die(const char *, const int, const char *)
  -> INLINE: (1530,5) die(const char *, const int, const char *)
  -> INLINE: (1537,22) die(const char *, const int, const char *)
  -> INLINE: (1539,40) die(const char *, const int, const char *)
  -> INLINE: (1541,40) die(const char *, const int, const char *)
  -> INLINE: (1543,23) die(const char *, const int, const char *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(626,3) inlined into d2q9-bgk.c(1477,16)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between call:calloc(size_t, size_t) (627:39) and object_ptr->speeds[kk] (627:5)
   remark #25436: completely unrolled by 9  
LOOP END

LOOP BEGIN at d2q9-bgk.c(626,3) inlined into d2q9-bgk.c(1482,20)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between call:calloc(size_t, size_t) (627:39) and object_ptr->speeds[kk] (627:5)
   remark #25436: completely unrolled by 9  
LOOP END

LOOP BEGIN at d2q9-bgk.c(1496,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between *cells_ptr->speeds[0] (1501:9) and *cells_ptr->speeds[8][ii+jj*params->nx] (1511:9)

   LOOP BEGIN at d2q9-bgk.c(1498,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between *cells_ptr->speeds[0] (1501:9) and *cells_ptr->speeds[8][ii+jj*params->nx] (1511:9)
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(1516,3)
   remark #15523: loop was not vectorized: loop control variable jj was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at d2q9-bgk.c(1518,5)
      remark #15523: loop was not vectorized: loop control variable ii was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 8  
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(1534,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(1409,1):remark #34051: REGISTER ALLOCATION : [initialise] d2q9-bgk.c:1409

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :     518
            Global    :     112
            Local     :     406
        Regenerable   :     237
        Spilled       :       8
        
    Routine stack
        Variables     :    1036 bytes*
            Reads     :       3 [1.63e+01 ~ 1.1%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      16 bytes*
            Reads     :       4 [2.94e+00 ~ 0.2%]
            Writes    :       2 [2.00e+00 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: initialise_params_from_file(const char *, t_param *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (initialise_params_from_file(const char *, t_param *)) [32] d2q9-bgk.c(731,74)
  -> INLINE: (742,5) die(const char *, const int, const char *)
  -> INLINE: (748,20) die(const char *, const int, const char *)
  -> INLINE: (752,20) die(const char *, const int, const char *)
  -> INLINE: (756,20) die(const char *, const int, const char *)
  -> INLINE: (760,20) die(const char *, const int, const char *)
  -> INLINE: (764,20) die(const char *, const int, const char *)
  -> INLINE: (768,20) die(const char *, const int, const char *)
  -> INLINE: (772,20) die(const char *, const int, const char *)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(731,74):remark #34051: REGISTER ALLOCATION : [initialise_params_from_file] d2q9-bgk.c:731

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rbx rbp rsi rdi r12]
        
    Routine temporaries
        Total         :     215
            Global    :      27
            Local     :     188
        Regenerable   :     118
        Spilled       :       3
        
    Routine stack
        Variables     :    1024 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
