Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.1.132 Build 20161005

Compiler options: -I/mnt/storage/apps/intel/impi/2017.1.132/intel64/include -std=c99 -Wall -O3 -qopt-report=5 -lm -o d2q9-bgk -L/mnt/storage/apps/intel/impi/2017.1.132/intel64/lib/release_mt -L/mnt/storage/apps/intel/impi/2017.1.132/intel64/lib -Xlinker --enable-new-dtags -Xlinker -rpath -Xlinker /mnt/storage/apps/intel/impi/2017.1.132/intel64/lib/release_mt -Xlinker -rpath -Xlinker /mnt/storage/apps/intel/impi/2017.1.132/intel64/lib -Xlinker -rpath -Xlinker /opt/intel/mpi-rt/2017.0.0/intel64/lib/release_mt -Xlinker -rpath -Xlinker /opt/intel/mpi-rt/2017.0.0/intel64/lib -lmpifort -lmpi -lmpigi -ldl -lrt -lpthread

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1/29=3.4%] d2q9-bgk.c(150,1)
  -> EXTERN: (185,3) MPI_Init(int *, char ***)
  -> EXTERN: (188,3) MPI_Initialized(int *)
  -> EXTERN: (190,5) MPI_Abort(MPI_Comm, int)
  -> EXTERN: (194,3) MPI_Get_processor_name(char *, int *)
  -> EXTERN: (201,3) MPI_Comm_size(MPI_Comm, int *)
  -> EXTERN: (204,3) MPI_Comm_rank(MPI_Comm, int *)
  -> INLINE: (209,5) usage(const char *) (isz = 6) (sz = 10)
    -> EXTERN: (1591,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1592,3) exit(int)
  -> INLINE: (217,3) initialise_params_from_file(const char *, t_param *) (isz = 254) (sz = 261)
    -> EXTERN: (656,8) fopen(const char *__restrict__, const char *__restrict__)
    -> EXTERN: (660,5) sprintf(char *__restrict__, const char *__restrict__, ...)
    -> INLINE: (661,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
      -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1585,3) fflush(FILE *)
      -> EXTERN: (1586,3) exit(int)
    -> EXTERN: (665,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
    -> INLINE: (667,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
      -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1585,3) fflush(FILE *)
      -> EXTERN: (1586,3) exit(int)
    -> EXTERN: (669,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
    -> INLINE: (671,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
      -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1585,3) fflush(FILE *)
      -> EXTERN: (1586,3) exit(int)
    -> EXTERN: (673,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
    -> INLINE: (675,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
      -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1585,3) fflush(FILE *)
      -> EXTERN: (1586,3) exit(int)
    -> EXTERN: (677,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
    -> INLINE: (679,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
      -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1585,3) fflush(FILE *)
      -> EXTERN: (1586,3) exit(int)
    -> EXTERN: (681,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
    -> INLINE: (683,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
      -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1585,3) fflush(FILE *)
      -> EXTERN: (1586,3) exit(int)
    -> EXTERN: (685,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
    -> INLINE: (687,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
      -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1585,3) fflush(FILE *)
      -> EXTERN: (1586,3) exit(int)
    -> EXTERN: (689,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
    -> INLINE: (691,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
      -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1585,3) fflush(FILE *)
      -> EXTERN: (1586,3) exit(int)
    -> EXTERN: (694,3) fclose(FILE *)
  -> INLINE: (222,20) calc_ncols_from_rank(int, int, int) (isz = 5) (sz = 16)
  -> EXTERN: (225,27) calloc(size_t, size_t)
  -> EXTERN: (226,28) calloc(size_t, size_t)
  -> EXTERN: (227,32) calloc(size_t, size_t)
  -> EXTERN: (228,28) calloc(size_t, size_t)
  -> EXTERN: (229,25) calloc(size_t, size_t)
  -> EXTERN: (230,29) calloc(size_t, size_t)
  -> EXTERN: (231,29) calloc(size_t, size_t)
  -> EXTERN: (232,32) calloc(size_t, size_t)
  -> EXTERN: (233,32) calloc(size_t, size_t)
  -> EXTERN: (234,29) calloc(size_t, size_t)
  -> EXTERN: (235,29) calloc(size_t, size_t)
  -> EXTERN: (236,31) calloc(size_t, size_t)
  -> EXTERN: (237,31) malloc(size_t)
  -> EXTERN: (240,5) printf(const char *__restrict__, ...)
  -> EXTERN: (241,21) printf(const char *__restrict__, ...)
  -> EXTERN: (242,28) printf(const char *__restrict__, ...)
  -> INLINE: (244,5) initialise(const char *, const char *, t_param *, t_speed **, t_speed **, int **, float **) (isz = 699) (sz = 718)
    -> EXTERN: (1304,8) fopen(const char *__restrict__, const char *__restrict__)
    -> EXTERN: (1308,5) sprintf(char *__restrict__, const char *__restrict__, ...)
    -> INLINE: (1309,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
      -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1585,3) fflush(FILE *)
      -> EXTERN: (1586,3) exit(int)
    -> EXTERN: (1313,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
    -> INLINE: (1315,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
      -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1585,3) fflush(FILE *)
      -> EXTERN: (1586,3) exit(int)
    -> EXTERN: (1317,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
    -> INLINE: (1319,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
      -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1585,3) fflush(FILE *)
      -> EXTERN: (1586,3) exit(int)
    -> EXTERN: (1321,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
    -> INLINE: (1323,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
      -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1585,3) fflush(FILE *)
      -> EXTERN: (1586,3) exit(int)
    -> EXTERN: (1325,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
    -> INLINE: (1327,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
      -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1585,3) fflush(FILE *)
      -> EXTERN: (1586,3) exit(int)
    -> EXTERN: (1329,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
    -> INLINE: (1331,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
      -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1585,3) fflush(FILE *)
      -> EXTERN: (1586,3) exit(int)
    -> EXTERN: (1333,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
    -> INLINE: (1335,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
      -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1585,3) fflush(FILE *)
      -> EXTERN: (1586,3) exit(int)
    -> EXTERN: (1337,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
    -> INLINE: (1339,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
      -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1585,3) fflush(FILE *)
      -> EXTERN: (1586,3) exit(int)
    -> EXTERN: (1342,3) fclose(FILE *)
    -> EXTERN: (1364,26) malloc(size_t)
    -> INLINE: (1366,27) die(const char *, const int, const char *) (isz = 14) (sz = 22)
      -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1585,3) fflush(FILE *)
      -> EXTERN: (1586,3) exit(int)
    -> EXTERN: (1369,30) malloc(size_t)
    -> INLINE: (1371,31) die(const char *, const int, const char *) (isz = 14) (sz = 22)
      -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1585,3) fflush(FILE *)
      -> EXTERN: (1586,3) exit(int)
    -> EXTERN: (1374,20) malloc(size_t)
    -> INLINE: (1376,31) die(const char *, const int, const char *) (isz = 14) (sz = 22)
      -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1585,3) fflush(FILE *)
      -> EXTERN: (1586,3) exit(int)
    -> EXTERN: (1412,8) fopen(const char *__restrict__, const char *__restrict__)
    -> EXTERN: (1416,5) sprintf(char *__restrict__, const char *__restrict__, ...)
    -> INLINE: (1417,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
      -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1585,3) fflush(FILE *)
      -> EXTERN: (1586,3) exit(int)
    -> EXTERN: (1421,20) fscanf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1421,20) fscanf(FILE *__restrict__, const char *__restrict__, ...)
    -> INLINE: (1424,22) die(const char *, const int, const char *) (isz = 14) (sz = 22)
      -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1585,3) fflush(FILE *)
      -> EXTERN: (1586,3) exit(int)
    -> INLINE: (1426,40) die(const char *, const int, const char *) (isz = 14) (sz = 22)
      -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1585,3) fflush(FILE *)
      -> EXTERN: (1586,3) exit(int)
    -> INLINE: (1428,40) die(const char *, const int, const char *) (isz = 14) (sz = 22)
      -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1585,3) fflush(FILE *)
      -> EXTERN: (1586,3) exit(int)
    -> INLINE: (1430,23) die(const char *, const int, const char *) (isz = 14) (sz = 22)
      -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1585,3) fflush(FILE *)
      -> EXTERN: (1586,3) exit(int)
    -> EXTERN: (1437,3) fclose(FILE *)
    -> EXTERN: (1443,26) malloc(size_t)
  -> EXTERN: (247,43) malloc(size_t)
  -> EXTERN: (248,43) malloc(size_t)
  -> INLINE: (250,26) calc_ncols_from_rank(int, int, int) (isz = 5) (sz = 16)
  -> EXTERN: (251,45) malloc(size_t)
  -> EXTERN: (252,47) malloc(size_t)
  -> INLINE: (257,32) calc_ncols_from_rank(int, int, int) (isz = 5) (sz = 16)
  -> INLINE: (258,24) start_process_grid_from(int, int, int) (isz = 9) (sz = 20)
    -> INLINE: (491,45) min(int, int) (isz = 0) (sz = 8)
  -> EXTERN: (270,9) MPI_Isend(const void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *)
  -> EXTERN: (271,9) MPI_Isend(const void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *)
  -> EXTERN: (278,5) MPI_Recv(void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *)
  -> EXTERN: (279,5) MPI_Recv(void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *)
  -> INLINE: (290,3) exchange_obstacles(int, int, t_param, int *, int *, int *) (isz = 121) (sz = 136)
    -> EXTERN: (513,3) MPI_Sendrecv(const void *, int, MPI_Datatype, int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *)
    -> EXTERN: (524,3) MPI_Sendrecv(const void *, int, MPI_Datatype, int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *)
  -> EXTERN: (293,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> EXTERN: (297,3) sprintf(char *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (298,3) fclose(FILE *)
  -> EXTERN: (298,10) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (303,36) printf(const char *__restrict__, ...)
  -> EXTERN: (306,32) printf(const char *__restrict__, ...)
  -> INLINE: (308,7) exchange_halos(int, int, t_param, t_speed *, float *, float *) (isz = 207) (sz = 222)
    -> EXTERN: (572,3) MPI_Sendrecv(const void *, int, MPI_Datatype, int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *)
    -> EXTERN: (589,3) MPI_Sendrecv(const void *, int, MPI_Datatype, int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *)
  -> (311,7) timestep_async(const t_param, t_speed **, t_speed **, int *, int, t_speed *, int, MPI_Request **) (isz = 1640) (sz = 1661)
     [[ Inlining would exceed -inline-max-size value (1661>230) <1>]]
  -> (312,24) av_velocity(const t_param, t_speed *, int *, int) (isz = 168) (sz = 181)
     [[ Inlining inhibited by overrideable criterion  <2>]]
  -> EXTERN: (316,38) malloc(size_t)
  -> INLINE: (318,7) exchange_halos_async(MPI_Request **, int, int, t_param, t_speed *, float *, float *, float *, float *) (isz = 125) (sz = 146)
    -> EXTERN: (538,3) MPI_Irecv(void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *)
    -> EXTERN: (539,3) MPI_Irecv(void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *)
    -> EXTERN: (547,3) MPI_Isend(const void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *)
    -> EXTERN: (556,3) MPI_Isend(const void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *)
  -> (324,7) timestep_async(const t_param, t_speed **, t_speed **, int *, int, t_speed *, int, MPI_Request **) (isz = 1640) (sz = 1661)
     [[ Inlining would exceed -inline-max-size value (1661>230) <1>]]
  -> (325,24) av_velocity(const t_param, t_speed *, int *, int) (isz = 168) (sz = 181)
     [[ Inlining inhibited by overrideable criterion  <2>]]
  -> EXTERN: (329,9) MPI_Wait(MPI_Request *, MPI_Status *)
  -> (358,7) timestep_async(const t_param, t_speed **, t_speed **, int *, int, t_speed *, int, MPI_Request **) (isz = 1640) (sz = 1661)
     [[ Inlining would exceed -inline-max-size value (1661>230) <1>]]
  -> (359,25) av_velocity(const t_param, t_speed *, int *, int) (isz = 168) (sz = 181)
     [[ Inlining inhibited by overrideable criterion  <2>]]
  -> EXTERN: (368,7) printf(const char *__restrict__, ...)
  -> EXTERN: (369,7) printf(const char *__restrict__, ...)
  -> EXTERN: (376,7) MPI_Recv(void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *)
  -> EXTERN: (394,5) MPI_Send(const void *, int, MPI_Datatype, int, int, MPI_Comm)
  -> EXTERN: (401,5) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> EXTERN: (403,5) getrusage(__rusage_who_t, struct rusage *)
  -> EXTERN: (408,5) printf(const char *__restrict__, ...)
  -> EXTERN: (410,5) printf(const char *__restrict__, ...)
  -> EXTERN: (411,5) printf(const char *__restrict__, ...)
  -> EXTERN: (412,5) printf(const char *__restrict__, ...)
  -> EXTERN: (417,45) malloc(size_t)
  -> EXTERN: (418,45) malloc(size_t)
  -> EXTERN: (427,5) MPI_Isend(const void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *)
  -> EXTERN: (428,5) MPI_Isend(const void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *)
  -> INLINE: (434,32) calc_ncols_from_rank(int, int, int) (isz = 5) (sz = 16)
  -> INLINE: (435,24) start_process_grid_from(int, int, int) (isz = 9) (sz = 20)
    -> INLINE: (491,45) min(int, int) (isz = 0) (sz = 8)
  -> EXTERN: (437,9) MPI_Recv(void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *)
  -> EXTERN: (438,9) MPI_Recv(void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *)
  -> INLINE: (455,5) write_values(const t_param, t_speed *, int *, float *) (isz = 261) (sz = 274)
    -> EXTERN: (1508,8) fopen(const char *__restrict__, const char *__restrict__)
    -> INLINE: (1512,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
      -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1585,3) fflush(FILE *)
      -> EXTERN: (1586,3) exit(int)
    -> EXTERN: (1558,7) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1562,3) fclose(FILE *)
    -> EXTERN: (1564,8) fopen(const char *__restrict__, const char *__restrict__)
    -> INLINE: (1568,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
      -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1585,3) fflush(FILE *)
      -> EXTERN: (1586,3) exit(int)
    -> EXTERN: (1573,5) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1576,3) fclose(FILE *)
  -> INLINE: (456,5) finalise(const t_param *, t_speed **, t_speed **, int **, float **) (isz = 14) (sz = 29)
    -> EXTERN: (1454,3) free(void *)
    -> EXTERN: (1457,3) free(void *)
    -> EXTERN: (1460,3) free(void *)
    -> EXTERN: (1463,3) free(void *)
  -> EXTERN: (460,3) MPI_Finalize(void)
  -> EXTERN: (461,3) free(void *)
  -> EXTERN: (462,3) free(void *)
  -> EXTERN: (463,3) free(void *)
  -> EXTERN: (464,3) free(void *)
  -> EXTERN: (465,3) free(void *)
  -> EXTERN: (466,3) free(void *)
  -> EXTERN: (467,3) free(void *)
  -> EXTERN: (468,3) free(void *)
  -> EXTERN: (469,3) free(void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(1383,3) inlined into d2q9-bgk.c(244,5)
   remark #25101: Loop Interchange not done due to: Original Order seems proper
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(1385,5) inlined into d2q9-bgk.c(244,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25439: unrolled with remainder by 2  

      LOOP BEGIN at d2q9-bgk.c(1395,9) inlined into d2q9-bgk.c(244,5)
         remark #15389: vectorization support: reference cells->speeds[ii+jj*params.nx][_2+5] has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15427: loop was completely unrolled
         remark #15309: vectorization support: normalized vectorization overhead 1.200
         remark #15301: MATERIALIZED LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 3 
         remark #15477: vector cost: 1.250 
         remark #15478: estimated potential speedup: 1.090 
         remark #15488: --- end vector cost summary ---
      LOOP END
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(1385,5) inlined into d2q9-bgk.c(244,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(1403,3) inlined into d2q9-bgk.c(244,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(1405,5) inlined into d2q9-bgk.c(244,5)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at d2q9-bgk.c(1405,5) inlined into d2q9-bgk.c(244,5)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(1405,5) inlined into d2q9-bgk.c(244,5)
         remark #15388: vectorization support: reference obstacles[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(1407,9) ]
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 3.333
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 3 
         remark #15477: vector cost: 0.750 
         remark #15478: estimated potential speedup: 1.940 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(1405,5) inlined into d2q9-bgk.c(244,5)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=24
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(1421,3) inlined into d2q9-bgk.c(244,5)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at d2q9-bgk.c(249,5)
   remark #15527: loop was not vectorized: function call to malloc(size_t) cannot be vectorized   [ d2q9-bgk.c(251,45) ]
LOOP END

LOOP BEGIN at d2q9-bgk.c(256,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(260,7)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at d2q9-bgk.c(262,9)
      <Distributed chunk1>
         remark #25426: Loop Distributed (2 way) 
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at d2q9-bgk.c(264,11)
            remark #15389: vectorization support: reference *(*(send_buffer_cells+(process-1)*8)+(child_col*(params.ny*9)+row*9+speed+params.ny*-9-10)*4) has unaligned access   [ d2q9-bgk.c(265,13) ]
            remark #15389: vectorization support: reference cells->speeds[row*params.nx+col][speed] has unaligned access   [ d2q9-bgk.c(265,93) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 4
            remark #15399: vectorization support: unroll factor set to 2
            remark #15309: vectorization support: normalized vectorization overhead 0.500
            remark #15300: LOOP WAS VECTORIZED
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 12 
            remark #15477: vector cost: 1.500 
            remark #15478: estimated potential speedup: 3.590 
            remark #15488: --- end vector cost summary ---
            remark #25015: Estimate of max trip count of loop=1
         LOOP END

         LOOP BEGIN at d2q9-bgk.c(264,11)
         <Remainder loop for vectorization>
            remark #25436: completely unrolled by 1  
         LOOP END
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(262,9)
      <Peeled loop for vectorization, Distributed chunk2>
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(262,9)
      <Distributed chunk2>
         remark #15388: vectorization support: reference *(*(send_buffer_obstacles+process*8)+(child_col*params.ny+row)*4) has aligned access   [ d2q9-bgk.c(263,11) ]
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <obstacles[row*params.nx+col]>, stride is unknown to compiler   [ d2q9-bgk.c(263,71) ]
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.314
         remark #15301: PARTIAL LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15452: unmasked strided loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 13 
         remark #15477: vector cost: 12.750 
         remark #15478: estimated potential speedup: 1.010 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(262,9)
      <Remainder loop for vectorization, Distributed chunk2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(277,3)
   remark #15523: loop was not vectorized: loop control variable col was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at d2q9-bgk.c(280,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between speeds.speeds[speed] (284:9) and speeds (286:48)
      remark #15346: vector dependence: assumed ANTI dependence between speeds (286:48) and speeds.speeds[speed] (284:9)

      LOOP BEGIN at d2q9-bgk.c(283,7)
         remark #25436: completely unrolled by 9   (pre-vector) 
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(510,3) inlined into d2q9-bgk.c(290,3)
   remark #15389: vectorization support: reference sbuffer_obstacles[row] has unaligned access   [ d2q9-bgk.c(511,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <child_obstacles[row*child_params.nx+1]>, stride is unknown to compiler   [ d2q9-bgk.c(511,30) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.079
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 9.500 
   remark #15478: estimated potential speedup: 0.520 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 8  
LOOP END

LOOP BEGIN at d2q9-bgk.c(510,3) inlined into d2q9-bgk.c(290,3)
<Remainder>
   remark #25436: completely unrolled by 7  
LOOP END

LOOP BEGIN at d2q9-bgk.c(516,3) inlined into d2q9-bgk.c(290,3)
   remark #15389: vectorization support: reference rbuffer_obstacles1[row] has unaligned access   [ d2q9-bgk.c(517,68) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <child_obstacles[row*child_params.nx+child_params.nx-1]>, stride is unknown to compiler   [ d2q9-bgk.c(517,5) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.081
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 9.250 
   remark #15478: estimated potential speedup: 0.530 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at d2q9-bgk.c(516,3) inlined into d2q9-bgk.c(290,3)
<Remainder>
LOOP END

LOOP BEGIN at d2q9-bgk.c(521,3) inlined into d2q9-bgk.c(290,3)
   remark #15389: vectorization support: reference sbuffer_obstacles[row] has unaligned access   [ d2q9-bgk.c(522,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <child_obstacles[row*child_params.nx+child_params.nx-2]>, stride is unknown to compiler   [ d2q9-bgk.c(522,30) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.079
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 9.500 
   remark #15478: estimated potential speedup: 0.520 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 8  
LOOP END

LOOP BEGIN at d2q9-bgk.c(521,3) inlined into d2q9-bgk.c(290,3)
<Remainder>
   remark #25436: completely unrolled by 7  
LOOP END

LOOP BEGIN at d2q9-bgk.c(527,3) inlined into d2q9-bgk.c(290,3)
   remark #15389: vectorization support: reference rbuffer_obstacles1[row] has unaligned access   [ d2q9-bgk.c(528,44) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <child_obstacles[row*child_params.nx]>, stride is unknown to compiler   [ d2q9-bgk.c(528,5) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.081
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 9.250 
   remark #15478: estimated potential speedup: 0.530 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at d2q9-bgk.c(527,3) inlined into d2q9-bgk.c(290,3)
<Remainder>
LOOP END

LOOP BEGIN at d2q9-bgk.c(300,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(542,3) inlined into d2q9-bgk.c(318,7)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at d2q9-bgk.c(543,5) inlined into d2q9-bgk.c(318,7)
         remark #15389: vectorization support: reference sbuffer_cells1[row*9+speed] has unaligned access   [ d2q9-bgk.c(544,7) ]
         remark #15389: vectorization support: reference child_cells->speeds[row*child_params.nx+1][speed] has unaligned access   [ d2q9-bgk.c(544,45) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.500
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 1.630 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(543,5) inlined into d2q9-bgk.c(318,7)
      <Remainder loop for vectorization>
         remark #25436: completely unrolled by 1  
      LOOP END
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(551,3) inlined into d2q9-bgk.c(318,7)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at d2q9-bgk.c(552,5) inlined into d2q9-bgk.c(318,7)
         remark #15389: vectorization support: reference sbuffer_cells2[row*9+speed] has unaligned access   [ d2q9-bgk.c(553,7) ]
         remark #15389: vectorization support: reference child_cells->speeds[row*child_params.nx+child_params.nx-2][speed] has unaligned access   [ d2q9-bgk.c(553,45) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.500
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 1.630 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(552,5) inlined into d2q9-bgk.c(318,7)
      <Remainder loop for vectorization>
         remark #25436: completely unrolled by 1  
      LOOP END
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(327,7)
      remark #15382: vectorization support: call to function MPI_Wait(MPI_Request *, MPI_Status *) cannot be vectorized   [ d2q9-bgk.c(329,9) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(332,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between speeds.speeds[speed] (335:11) and speeds (338:52)
      remark #15346: vector dependence: assumed ANTI dependence between speeds (338:52) and speeds.speeds[speed] (335:11)

      LOOP BEGIN at d2q9-bgk.c(334,9)
         remark #25436: completely unrolled by 9   (pre-vector) 
      LOOP END
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(344,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between speeds.speeds[speed] (347:11) and speeds (350:76)
      remark #15346: vector dependence: assumed ANTI dependence between speeds (350:76) and speeds.speeds[speed] (347:11)

      LOOP BEGIN at d2q9-bgk.c(346,9)
         remark #25436: completely unrolled by 9   (pre-vector) 
      LOOP END
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(315,7)
      remark #15527: loop was not vectorized: function call to malloc(size_t) cannot be vectorized   [ d2q9-bgk.c(316,38) ]
      remark #25436: completely unrolled by 4  
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(375,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(377,7)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(377,7)
      remark #15388: vectorization support: reference child_vels[tt] has aligned access   [ d2q9-bgk.c(378,9) ]
      remark #15388: vectorization support: reference child_vels[tt] has aligned access   [ d2q9-bgk.c(378,9) ]
      remark #15388: vectorization support: reference rbuffer_vels[tt] has aligned access   [ d2q9-bgk.c(378,27) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.400
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 1.250 
      remark #15478: estimated potential speedup: 5.760 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(377,7)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(377,7)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference child_vels[tt] has aligned access   [ d2q9-bgk.c(378,9) ]
      remark #15388: vectorization support: reference child_vels[tt] has aligned access   [ d2q9-bgk.c(378,9) ]
      remark #15389: vectorization support: reference rbuffer_vels[tt] has unaligned access   [ d2q9-bgk.c(378,27) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.083
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(383,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(384,7)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(384,7)
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 19 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 6.900 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(384,7)
   <Remainder loop for vectorization>
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.417
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(384,7)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(390,5)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at d2q9-bgk.c(390,5)
   remark #15388: vectorization support: reference av_vels[tt] has aligned access   [ d2q9-bgk.c(391,7) ]
   remark #15388: vectorization support: reference child_vels[tt] has aligned access   [ d2q9-bgk.c(391,21) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.243
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 32 
   remark #15477: vector cost: 8.750 
   remark #15478: estimated potential speedup: 3.510 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk.c(390,5)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at d2q9-bgk.c(390,5)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference av_vels[tt] has aligned access   [ d2q9-bgk.c(391,7) ]
   remark #15389: vectorization support: reference child_vels[tt] has unaligned access   [ d2q9-bgk.c(391,21) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.400
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at d2q9-bgk.c(390,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at d2q9-bgk.c(419,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(420,5)
   <Distributed chunk1>
      remark #25426: Loop Distributed (2 way) 
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at d2q9-bgk.c(422,7)
         remark #15389: vectorization support: reference send_child_buffer_cells[(col*child_params.ny+row)*9+speed] has unaligned access   [ d2q9-bgk.c(423,9) ]
         remark #15389: vectorization support: reference child_cells->speeds[row*child_params.nx+col][speed] has unaligned access   [ d2q9-bgk.c(423,86) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.500
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 1.630 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(422,7)
      <Remainder loop for vectorization>
         remark #25436: completely unrolled by 1  
      LOOP END
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(420,5)
   <Distributed chunk2>
      remark #15389: vectorization support: reference send_child_buffer_obstacles[col*child_params.ny+row] has unaligned access   [ d2q9-bgk.c(421,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <child_obstacles[row*child_params.nx+col]>, stride is unknown to compiler   [ d2q9-bgk.c(421,64) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.056
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15452: unmasked strided loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 11 
      remark #15477: vector cost: 13.500 
      remark #15478: estimated potential speedup: 0.810 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(420,5)
   <Remainder, Distributed chunk2>
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(433,5)
   remark #15523: loop was not vectorized: loop control variable process was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at d2q9-bgk.c(436,7)
      remark #15382: vectorization support: call to function MPI_Recv(void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *) cannot be vectorized   [ d2q9-bgk.c(437,9) ]
      remark #15382: vectorization support: call to function MPI_Recv(void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *) cannot be vectorized   [ d2q9-bgk.c(438,9) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization

      LOOP BEGIN at d2q9-bgk.c(440,9)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between speeds.speeds[speed] (444:13) and speeds (445:42)
         remark #15346: vector dependence: assumed ANTI dependence between speeds (445:42) and speeds.speeds[speed] (444:13)

         LOOP BEGIN at d2q9-bgk.c(443,11)
            remark #25436: completely unrolled by 9   (pre-vector) 
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(1515,3) inlined into d2q9-bgk.c(455,5)
   remark #25095: Loop Interchange not done due to: User Function Inside Loop Nest
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(1558,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (1558:7) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (1558:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (1558:7) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (1558:7)

   LOOP BEGIN at d2q9-bgk.c(1517,5) inlined into d2q9-bgk.c(455,5)
      remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(1558,7) ]

      LOOP BEGIN at d2q9-bgk.c(1530,9) inlined into d2q9-bgk.c(455,5)
         remark #25436: completely unrolled by 9   (pre-vector) 
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(1571,3) inlined into d2q9-bgk.c(455,5)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(1573,5) ]
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(286,48):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
d2q9-bgk.c(286,48):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(324,7):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
d2q9-bgk.c(324,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(325,24):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
d2q9-bgk.c(325,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(338,52):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
d2q9-bgk.c(338,52):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(350,76):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
d2q9-bgk.c(350,76):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(358,7):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
d2q9-bgk.c(358,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(359,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
d2q9-bgk.c(359,25):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(445,42):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
d2q9-bgk.c(445,42):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(1407,9):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
d2q9-bgk.c(1407,9):remark #34026: call to memset implemented as a call to optimized library version
d2q9-bgk.c(150,1):remark #34051: REGISTER ALLOCATION : [main] d2q9-bgk.c:150

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   24[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm9]
        
    Routine temporaries
        Total         :    1997
            Global    :     421
            Local     :    1576
        Regenerable   :     576
        Spilled       :      98
        
    Routine stack
        Variables     :    3484 bytes*
            Reads     :     121 [2.64e+02 ~ 2.3%]
            Writes    :      25 [1.34e+01 ~ 0.1%]
        Spills        :     696 bytes*
            Reads     :     245 [4.01e+02 ~ 3.6%]
            Writes    :     118 [1.39e+02 ~ 1.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: timestep_async(const t_param, t_speed **, t_speed **, int *, int, t_speed *, int, MPI_Request **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (timestep_async(const t_param, t_speed **, t_speed **, int *, int, t_speed *, int, MPI_Request **)) [2/29=6.9%] d2q9-bgk.c(717,1)
  -> INLINE: (719,5) accelerate_flow(const t_param, t_speed *, int *, int) (isz = 159) (sz = 172)
  -> (722,7) merged_timestep_ops(const t_param, t_speed *, t_speed *, int *, int) (isz = 587) (sz = 602)
     [[ Inlining would exceed -inline-max-size value (602>230) <1>]]
  -> INLINE: (734,7) propagate(const t_param, t_speed *, t_speed *, int) (isz = 184) (sz = 197)
  -> INLINE: (735,7) rebound(const t_param, t_speed *, t_speed *, int *, int) (isz = 155) (sz = 170)
  -> CP_CLONE (736,7) collision..1(const t_param, t_speed *, t_speed *, int *, int) (isz = 370) (sz = 385)
     [[ Inlining would exceed -inline-max-size value (385>230) <1>]]
  -> INLINE: (741,7) accelerate_flow(const t_param, t_speed *, int *, int) (isz = 159) (sz = 172)
  -> (742,7) merged_timestep_ops(const t_param, t_speed *, t_speed *, int *, int) (isz = 587) (sz = 602)
     [[ Inlining would exceed -inline-max-size value (602>230) <1>]]
  -> INLINE: (747,9) swap_cells(t_speed *, t_speed *) (isz = 28) (sz = 35)
  -> INLINE: (748,9) swap_cells(t_speed *, t_speed *) (isz = 28) (sz = 35)
  -> INLINE: (751,7) accelerate_flow(const t_param, t_speed *, int *, int) (isz = 159) (sz = 172)
  -> INLINE: (752,7) propagate(const t_param, t_speed *, t_speed *, int) (isz = 184) (sz = 197)
  -> EXTERN: (756,11) MPI_Test(MPI_Request *, int *, MPI_Status *)
  -> INLINE: (758,7) rebound(const t_param, t_speed *, t_speed *, int *, int) (isz = 155) (sz = 170)
  -> CP_CLONE (759,7) collision..0(const t_param, t_speed *, t_speed *, int *, int) (isz = 370) (sz = 385)
     [[ Inlining would exceed -inline-max-size value (385>230) <1>]]
  -> INLINE: (767,5) accelerate_flow(const t_param, t_speed *, int *, int) (isz = 159) (sz = 172)
  -> (768,5) merged_timestep_ops(const t_param, t_speed *, t_speed *, int *, int) (isz = 587) (sz = 602)
     [[ Inlining would exceed -inline-max-size value (602>230) <1>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(807,3) inlined into d2q9-bgk.c(719,5)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][3]>, masked, stride is 9   [ d2q9-bgk.c(812,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][6]>, masked, stride is 9   [ d2q9-bgk.c(813,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][7]>, masked, stride is 9   [ d2q9-bgk.c(814,13) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <cells->speeds[ii+jj*params.nx][1]>, masked, stride is 9   [ d2q9-bgk.c(817,7) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][1]>, masked, stride is 9   [ d2q9-bgk.c(817,7) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <cells->speeds[ii+jj*params.nx][5]>, masked, stride is 9   [ d2q9-bgk.c(818,7) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][5]>, masked, stride is 9   [ d2q9-bgk.c(818,7) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <cells->speeds[ii+jj*params.nx][8]>, masked, stride is 9   [ d2q9-bgk.c(819,7) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][8]>, masked, stride is 9   [ d2q9-bgk.c(819,7) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <cells->speeds[ii+jj*params.nx][3]>, masked, stride is 9   [ d2q9-bgk.c(821,7) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][3]>, masked, stride is 9   [ d2q9-bgk.c(821,7) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <cells->speeds[ii+jj*params.nx][6]>, masked, stride is 9   [ d2q9-bgk.c(822,7) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][6]>, masked, stride is 9   [ d2q9-bgk.c(822,7) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <cells->speeds[ii+jj*params.nx][7]>, masked, stride is 9   [ d2q9-bgk.c(823,7) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][7]>, masked, stride is 9   [ d2q9-bgk.c(823,7) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.021
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15460: masked strided loads: 9 
   remark #15462: unmasked indexed (or gather) loads: 6 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 32 
   remark #15477: vector cost: 350.750 
   remark #15478: estimated potential speedup: 0.090 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk.c(807,3) inlined into d2q9-bgk.c(741,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between cells->speeds[ii+jj*params.nx][1] (817:7) and cells->speeds[ii+jj*params.nx][1] (817:7)
   remark #15346: vector dependence: assumed ANTI dependence between cells->speeds[ii+jj*params.nx][1] (817:7) and cells->speeds[ii+jj*params.nx][1] (817:7)
LOOP END

LOOP BEGIN at d2q9-bgk.c(807,3) inlined into d2q9-bgk.c(767,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between cells->speeds[ii+jj*params.nx][1] (817:7) and cells->speeds[ii+jj*params.nx][1] (817:7)
   remark #15346: vector dependence: assumed ANTI dependence between cells->speeds[ii+jj*params.nx][1] (817:7) and cells->speeds[ii+jj*params.nx][1] (817:7)
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(722,7):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
d2q9-bgk.c(722,7):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
d2q9-bgk.c(722,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(742,7):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
d2q9-bgk.c(742,7):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
d2q9-bgk.c(742,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(768,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
d2q9-bgk.c(768,5):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
d2q9-bgk.c(768,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(717,1):remark #34051: REGISTER ALLOCATION : [timestep_async] d2q9-bgk.c:717

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbx rbp rsi rdi r8-r11 r15 zmm0-zmm8]
        
    Routine temporaries
        Total         :     140
            Global    :      55
            Local     :      85
        Regenerable   :      21
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: collision..0(const t_param, t_speed *, t_speed *, int *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (collision..0(const t_param, t_speed *, t_speed *, int *, int)) [3/29=10.3%] d2q9-bgk.c(1107,1)
  CLONED FROM: collision(const t_param, t_speed *, t_speed *, int *, int)(X,X,X,X,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(1131,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(1133,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at d2q9-bgk.c(1144,9)
         remark #15389: vectorization support: reference tmp_cells->speeds[ii+jj*params.nx][kk] has unaligned access   [ d2q9-bgk.c(1146,28) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 2.833
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 0.880 
         remark #15488: --- end vector cost summary ---
         remark #25436: completely unrolled by 9  
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(1199,9)
         remark #15389: vectorization support: reference d_equ[_2+5] has unaligned access
         remark #15389: vectorization support: reference u[_2+5] has unaligned access   [ d2q9-bgk.c(1199,48) ]
         remark #15389: vectorization support: reference u[_2+5] has unaligned access   [ d2q9-bgk.c(1200,45) ]
         remark #15389: vectorization support: reference u[_2+5] has unaligned access   [ d2q9-bgk.c(1200,52) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15427: loop was completely unrolled
         remark #15309: vectorization support: normalized vectorization overhead 0.071
         remark #15301: MATERIALIZED LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 3 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 95 
         remark #15477: vector cost: 21.000 
         remark #15478: estimated potential speedup: 4.220 
         remark #15486: divides: 2 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(1213,9)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between cells->speeds[ii+jj*params.nx][kk] (1215:11) and tmp_cells->speeds[ii+jj*params.nx][kk] (1215:11)
         remark #15346: vector dependence: assumed ANTI dependence between tmp_cells->speeds[ii+jj*params.nx][kk] (1215:11) and cells->speeds[ii+jj*params.nx][kk] (1215:11)
         remark #25436: completely unrolled by 9  
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(1107,1):remark #34051: REGISTER ALLOCATION : [collision..0] d2q9-bgk.c:1107

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   28[ rax rdx rcx rbx rbp rsi rdi r8-r11 r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     168
            Global    :      30
            Local     :     138
        Regenerable   :      15
        Spilled       :       3
        
    Routine stack
        Variables     :      72 bytes*
            Reads     :       3 [3.75e+01 ~ 1.7%]
            Writes    :      14 [1.75e+02 ~ 7.9%]
        Spills        :      24 bytes*
            Reads     :       3 [2.70e+00 ~ 0.1%]
            Writes    :       3 [2.70e+00 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: collision..1(const t_param, t_speed *, t_speed *, int *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (collision..1(const t_param, t_speed *, t_speed *, int *, int)) [4/29=13.8%] d2q9-bgk.c(1107,1)
  CLONED FROM: collision(const t_param, t_speed *, t_speed *, int *, int)(X,X,X,X,0)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(1131,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(1133,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at d2q9-bgk.c(1144,9)
         remark #15389: vectorization support: reference tmp_cells->speeds[ii+jj*params.nx][kk] has unaligned access   [ d2q9-bgk.c(1146,28) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 2.833
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 0.880 
         remark #15488: --- end vector cost summary ---
         remark #25436: completely unrolled by 9  
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(1199,9)
         remark #15389: vectorization support: reference d_equ[_2+5] has unaligned access
         remark #15389: vectorization support: reference u[_2+5] has unaligned access   [ d2q9-bgk.c(1199,48) ]
         remark #15389: vectorization support: reference u[_2+5] has unaligned access   [ d2q9-bgk.c(1200,45) ]
         remark #15389: vectorization support: reference u[_2+5] has unaligned access   [ d2q9-bgk.c(1200,52) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15427: loop was completely unrolled
         remark #15309: vectorization support: normalized vectorization overhead 0.071
         remark #15301: MATERIALIZED LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 3 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 95 
         remark #15477: vector cost: 21.000 
         remark #15478: estimated potential speedup: 4.220 
         remark #15486: divides: 2 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(1213,9)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between cells->speeds[ii+jj*params.nx][kk] (1215:11) and tmp_cells->speeds[ii+jj*params.nx][kk] (1215:11)
         remark #15346: vector dependence: assumed ANTI dependence between tmp_cells->speeds[ii+jj*params.nx][kk] (1215:11) and cells->speeds[ii+jj*params.nx][kk] (1215:11)
         remark #25436: completely unrolled by 9  
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(1107,1):remark #34051: REGISTER ALLOCATION : [collision..1] d2q9-bgk.c:1107

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rbp rsi rdi r8-r11 r13-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     171
            Global    :      32
            Local     :     139
        Regenerable   :      15
        Spilled       :       5
        
    Routine stack
        Variables     :      72 bytes*
            Reads     :       3 [3.75e+01 ~ 1.7%]
            Writes    :      14 [1.75e+02 ~ 8.0%]
        Spills        :      40 bytes*
            Reads     :       5 [4.50e+00 ~ 0.2%]
            Writes    :       5 [4.50e+00 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: merged_timestep_ops(const t_param, t_speed *, t_speed *, int *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (merged_timestep_ops(const t_param, t_speed *, t_speed *, int *, int)) [5/29=17.2%] d2q9-bgk.c(878,109)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(901,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(903,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at d2q9-bgk.c(1031,9)
         remark #15389: vectorization support: reference tmp_cells->speeds[ii+jj*params.nx][kk] has unaligned access   [ d2q9-bgk.c(1033,11) ]
         remark #15389: vectorization support: reference tmp_cells->speeds[ii+jj*params.nx][kk] has unaligned access   [ d2q9-bgk.c(1033,53) ]
         remark #15388: vectorization support: reference d_equ[kk] has aligned access   [ d2q9-bgk.c(1035,54) ]
         remark #15389: vectorization support: reference tmp_cells->speeds[ii+jj*params.nx][kk] has unaligned access   [ d2q9-bgk.c(1035,66) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.346
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 11 
         remark #15477: vector cost: 3.250 
         remark #15478: estimated potential speedup: 2.150 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(962,9)
         remark #15389: vectorization support: reference tmp_cells->speeds[ii+jj*params.nx][kk] has unaligned access   [ d2q9-bgk.c(964,28) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 2.833
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 0.880 
         remark #15488: --- end vector cost summary ---
         remark #25436: completely unrolled by 9  
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(1017,9)
         remark #15389: vectorization support: reference d_equ[_2+5] has unaligned access
         remark #15389: vectorization support: reference u[_2+5] has unaligned access   [ d2q9-bgk.c(1017,48) ]
         remark #15389: vectorization support: reference u[_2+5] has unaligned access   [ d2q9-bgk.c(1018,45) ]
         remark #15389: vectorization support: reference u[_2+5] has unaligned access   [ d2q9-bgk.c(1018,52) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15427: loop was completely unrolled
         remark #15309: vectorization support: normalized vectorization overhead 0.071
         remark #15301: MATERIALIZED LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 3 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 95 
         remark #15477: vector cost: 21.000 
         remark #15478: estimated potential speedup: 4.220 
         remark #15486: divides: 2 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(1031,9)
      <Remainder loop for vectorization>
         remark #25436: completely unrolled by 1  
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(943,32):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
d2q9-bgk.c(943,32):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (16, 0)
d2q9-bgk.c(878,109):remark #34051: REGISTER ALLOCATION : [merged_timestep_ops] d2q9-bgk.c:878

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   31[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     224
            Global    :      52
            Local     :     172
        Regenerable   :      16
        Spilled       :      17
        
    Routine stack
        Variables     :      72 bytes*
            Reads     :       3 [3.75e+01 ~ 1.0%]
            Writes    :      14 [1.75e+02 ~ 4.7%]
        Spills        :     104 bytes*
            Reads     :      14 [1.17e+02 ~ 3.1%]
            Writes    :      13 [3.33e+01 ~ 0.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: av_velocity(const t_param, t_speed *, int *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (av_velocity(const t_param, t_speed *, int *, int)) [6/29=20.7%] d2q9-bgk.c(1227,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(1250,3)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive   [ d2q9-bgk.c(1252,5) ]

   LOOP BEGIN at d2q9-bgk.c(1252,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between ii (1252:36) and ii (1255:7)
      remark #15346: vector dependence: assumed ANTI dependence between ii (1255:7) and ii (1252:36)
      remark #15346: vector dependence: assumed ANTI dependence between ii (1255:7) and ii (1252:36)
      remark #15346: vector dependence: assumed FLOW dependence between ii (1252:36) and ii (1255:7)

      LOOP BEGIN at d2q9-bgk.c(1260,9)
         remark #25436: completely unrolled by 9   (pre-vector) 
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(1227,1):remark #34051: REGISTER ALLOCATION : [av_velocity] d2q9-bgk.c:1227

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :      91
            Global    :      31
            Local     :      60
        Regenerable   :       4
        Spilled       :      12
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      80 bytes*
            Reads     :      10 [3.11e+01 ~ 3.5%]
            Writes    :      10 [1.62e+01 ~ 1.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: swap_floats(float *, float *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (swap_floats(float *, float *)) [7/29=24.1%] d2q9-bgk.c(474,44)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(474,44):remark #34051: REGISTER ALLOCATION : [swap_floats] d2q9-bgk.c:474

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rsi rdi]
        
    Routine temporaries
        Total         :      12
            Global    :       0
            Local     :      12
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: swap_cells(t_speed *, t_speed *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (swap_cells(t_speed *, t_speed *)) [8/29=27.6%] d2q9-bgk.c(480,47)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(481,19):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
d2q9-bgk.c(481,19):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (16, 0)
d2q9-bgk.c(482,12):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
d2q9-bgk.c(482,12):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
d2q9-bgk.c(482,12):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(483,11):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
d2q9-bgk.c(483,11):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(480,47):remark #34051: REGISTER ALLOCATION : [swap_cells] d2q9-bgk.c:480

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rsi rdi zmm0-zmm3]
        
    Routine temporaries
        Total         :      16
            Global    :       0
            Local     :      16
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: start_process_grid_from(int, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (start_process_grid_from(int, int, int)) [9/29=31.0%] d2q9-bgk.c(486,56)
  -> INLINE: (491,45) min(int, int) (isz = 0) (sz = 8)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(486,56):remark #34051: REGISTER ALLOCATION : [start_process_grid_from] d2q9-bgk.c:486

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rsi rdi]
        
    Routine temporaries
        Total         :      22
            Global    :       0
            Local     :      22
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: min(int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (min(int, int)) [10/29=34.5%] d2q9-bgk.c(500,23)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(500,23):remark #34051: REGISTER ALLOCATION : [min] d2q9-bgk.c:500

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rsi rdi]
        
    Routine temporaries
        Total         :      12
            Global    :       0
            Local     :      12
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: exchange_obstacles(int, int, t_param, int *, int *, int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (exchange_obstacles(int, int, t_param, int *, int *, int *)) [11/29=37.9%] d2q9-bgk.c(505,71)
  -> EXTERN: (513,3) MPI_Sendrecv(const void *, int, MPI_Datatype, int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *)
  -> EXTERN: (524,3) MPI_Sendrecv(const void *, int, MPI_Datatype, int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(510,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between sbuffer_obstacles[row] (511:5) and child_obstacles[row*child_params.nx+1] (511:5)
   remark #15346: vector dependence: assumed ANTI dependence between child_obstacles[row*child_params.nx+1] (511:5) and sbuffer_obstacles[row] (511:5)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at d2q9-bgk.c(510,3)
<Remainder>
LOOP END

LOOP BEGIN at d2q9-bgk.c(516,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between child_obstacles[row*child_params.nx+child_params.nx-1] (517:5) and rbuffer_obstacles[row] (517:5)
   remark #15346: vector dependence: assumed ANTI dependence between rbuffer_obstacles[row] (517:5) and child_obstacles[row*child_params.nx+child_params.nx-1] (517:5)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at d2q9-bgk.c(516,3)
<Remainder>
LOOP END

LOOP BEGIN at d2q9-bgk.c(521,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between sbuffer_obstacles[row] (522:5) and child_obstacles[row*child_params.nx+child_params.nx-2] (522:5)
   remark #15346: vector dependence: assumed ANTI dependence between child_obstacles[row*child_params.nx+child_params.nx-2] (522:5) and sbuffer_obstacles[row] (522:5)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at d2q9-bgk.c(521,3)
<Remainder>
LOOP END

LOOP BEGIN at d2q9-bgk.c(527,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between child_obstacles[row*child_params.nx] (528:5) and rbuffer_obstacles[row] (528:5)
   remark #15346: vector dependence: assumed ANTI dependence between rbuffer_obstacles[row] (528:5) and child_obstacles[row*child_params.nx] (528:5)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at d2q9-bgk.c(527,3)
<Remainder>
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(505,71):remark #34051: REGISTER ALLOCATION : [exchange_obstacles] d2q9-bgk.c:505

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     135
            Global    :      49
            Local     :      86
        Regenerable   :      17
        Spilled       :      10
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :       6 [5.60e+00 ~ 1.9%]
            Writes    :       6 [5.60e+00 ~ 1.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: exchange_halos_async(MPI_Request **, int, int, t_param, t_speed *, float *, float *, float *, float *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (exchange_halos_async(MPI_Request **, int, int, t_param, t_speed *, float *, float *, float *, float *)) [12/29=41.4%] d2q9-bgk.c(535,69)
  -> EXTERN: (538,3) MPI_Irecv(void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *)
  -> EXTERN: (539,3) MPI_Irecv(void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *)
  -> EXTERN: (547,3) MPI_Isend(const void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *)
  -> EXTERN: (556,3) MPI_Isend(const void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(542,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between sbuffer_cells1[row*9+speed] (544:7) and child_cells->speeds[row*child_params.nx+1][speed] (544:7)
   remark #15346: vector dependence: assumed ANTI dependence between child_cells->speeds[row*child_params.nx+1][speed] (544:7) and sbuffer_cells1[row*9+speed] (544:7)

   LOOP BEGIN at d2q9-bgk.c(543,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between sbuffer_cells1[row*9+speed] (544:7) and child_cells->speeds[row*child_params.nx+1][speed] (544:7)
      remark #15346: vector dependence: assumed ANTI dependence between child_cells->speeds[row*child_params.nx+1][speed] (544:7) and sbuffer_cells1[row*9+speed] (544:7)
      remark #25436: completely unrolled by 9  
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(551,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between sbuffer_cells2[row*9+speed] (553:7) and child_cells->speeds[row*child_params.nx+child_params.nx-2][speed (553:7)
   remark #15346: vector dependence: assumed ANTI dependence between child_cells->speeds[row*child_params.nx+child_params.nx-2][speed (553:7) and sbuffer_cells2[row*9+speed] (553:7)

   LOOP BEGIN at d2q9-bgk.c(552,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between sbuffer_cells2[row*9+speed] (553:7) and child_cells->speeds[row*child_params.nx+child_params.nx-2][speed (553:7)
      remark #15346: vector dependence: assumed ANTI dependence between child_cells->speeds[row*child_params.nx+child_params.nx-2][speed (553:7) and sbuffer_cells2[row*9+speed] (553:7)
      remark #25436: completely unrolled by 9  
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(535,69):remark #34051: REGISTER ALLOCATION : [exchange_halos_async] d2q9-bgk.c:535

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :      97
            Global    :      26
            Local     :      71
        Regenerable   :      14
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       2 [1.90e+00 ~ 0.6%]
            Writes    :       1 [1.00e+00 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: exchange_halos(int, int, t_param, t_speed *, float *, float *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (exchange_halos(int, int, t_param, t_speed *, float *, float *)) [13/29=44.8%] d2q9-bgk.c(561,67)
  -> EXTERN: (572,3) MPI_Sendrecv(const void *, int, MPI_Datatype, int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *)
  -> EXTERN: (589,3) MPI_Sendrecv(const void *, int, MPI_Datatype, int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(566,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between sbuffer_cells[row*9+speed] (568:7) and child_cells->speeds[row*child_params.nx+1][speed] (568:7)
   remark #15346: vector dependence: assumed ANTI dependence between child_cells->speeds[row*child_params.nx+1][speed] (568:7) and sbuffer_cells[row*9+speed] (568:7)

   LOOP BEGIN at d2q9-bgk.c(567,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between sbuffer_cells[row*9+speed] (568:7) and child_cells->speeds[row*child_params.nx+1][speed] (568:7)
      remark #15346: vector dependence: assumed ANTI dependence between child_cells->speeds[row*child_params.nx+1][speed] (568:7) and sbuffer_cells[row*9+speed] (568:7)
      remark #25436: completely unrolled by 9  
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(575,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between rbuffer_cells[row*9+speed] (578:7) and *(child_cells+(row*child_params.nx+child_params.nx-1)*36) (580:64)
   remark #15346: vector dependence: assumed FLOW dependence between *(child_cells+(row*child_params.nx+child_params.nx-1)*36) (580:64) and rbuffer_cells[row*9+speed] (578:7)

   LOOP BEGIN at d2q9-bgk.c(577,5)
      remark #25436: completely unrolled by 9   (pre-vector) 
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(584,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between sbuffer_cells[row*9+speed] (586:7) and child_cells->speeds[row*child_params.nx+child_params.nx-2][speed (586:7)
   remark #15346: vector dependence: assumed ANTI dependence between child_cells->speeds[row*child_params.nx+child_params.nx-2][speed (586:7) and sbuffer_cells[row*9+speed] (586:7)

   LOOP BEGIN at d2q9-bgk.c(585,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between sbuffer_cells[row*9+speed] (586:7) and child_cells->speeds[row*child_params.nx+child_params.nx-2][speed (586:7)
      remark #15346: vector dependence: assumed ANTI dependence between child_cells->speeds[row*child_params.nx+child_params.nx-2][speed (586:7) and sbuffer_cells[row*9+speed] (586:7)
      remark #25436: completely unrolled by 9  
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(592,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between speeds.speeds[speed] (595:7) and speeds (597:40)
   remark #15346: vector dependence: assumed ANTI dependence between speeds (597:40) and speeds.speeds[speed] (595:7)

   LOOP BEGIN at d2q9-bgk.c(594,5)
      remark #25436: completely unrolled by 9   (pre-vector) 
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(580,64):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
d2q9-bgk.c(580,64):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(597,40):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
d2q9-bgk.c(597,40):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(561,67):remark #34051: REGISTER ALLOCATION : [exchange_halos] d2q9-bgk.c:561

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     138
            Global    :      35
            Local     :     103
        Regenerable   :      14
        Spilled       :       8
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      16 bytes*
            Reads     :       4 [3.90e+00 ~ 0.6%]
            Writes    :       2 [2.00e+00 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: output_state(const char *, int, t_speed *, int *, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (output_state(const char *, int, t_speed *, int *, int, int)) [14/29=48.3%] d2q9-bgk.c(601,102)
  -> EXTERN: (602,14) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (605,5) printf(const char *__restrict__, ...)
  -> EXTERN: (608,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (612,9) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (614,7) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (616,5) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (620,7) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (622,5) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (624,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (625,3) fclose(FILE *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(609,3)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(612,9) ]
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(612,9) ]
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(612,9) ]
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(612,9) ]
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(612,9) ]
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(612,9) ]
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(612,9) ]
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(612,9) ]
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(612,9) ]
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(614,7) ]
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(616,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (612:9) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (616:5)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (616:5) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (612:9)

   LOOP BEGIN at d2q9-bgk.c(610,5)
      remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(612,9) ]
      remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(612,9) ]
      remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(612,9) ]
      remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(612,9) ]
      remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(612,9) ]
      remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(612,9) ]
      remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(612,9) ]
      remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(612,9) ]
      remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(612,9) ]
      remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(614,7) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (612:9) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (614:7)
      remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (614:7) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (612:9)

      LOOP BEGIN at d2q9-bgk.c(611,7)
         remark #25436: completely unrolled by 9   (pre-vector) 
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(618,3)
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(620,7) ]
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(622,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (620:7) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (622:5)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (622:5) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (620:7)

   LOOP BEGIN at d2q9-bgk.c(619,5)
      remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(620,7) ]
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(601,102):remark #34051: REGISTER ALLOCATION : [output_state] d2q9-bgk.c:601

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r15 zmm0]
        
    Routine temporaries
        Total         :     110
            Global    :      28
            Local     :      82
        Regenerable   :      37
        Spilled       :      12
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :      11 [4.02e+01 ~ 1.9%]
            Writes    :       8 [2.75e+01 ~ 1.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: calc_ncols_from_rank(int, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (calc_ncols_from_rank(int, int, int)) [15/29=51.7%] d2q9-bgk.c(629,1)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(629,1):remark #34051: REGISTER ALLOCATION : [calc_ncols_from_rank] d2q9-bgk.c:629

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    5[ rax rdx rcx rsi rdi]
        
    Routine temporaries
        Total         :      21
            Global    :       0
            Local     :      21
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: timestep(const t_param, t_speed **, t_speed **, int *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (timestep(const t_param, t_speed **, t_speed **, int *, int)) [16/29=55.2%] d2q9-bgk.c(698,1)
  -> INLINE: (699,3) accelerate_flow(const t_param, t_speed *, int *, int) (isz = 159) (sz = 172)
  -> INLINE: (701,3) propagate(const t_param, t_speed *, t_speed *, int) (isz = 184) (sz = 197)
  -> INLINE: (702,3) rebound(const t_param, t_speed *, t_speed *, int *, int) (isz = 155) (sz = 170)
  -> (703,3) collision(const t_param, t_speed *, t_speed *, int *, int) (isz = 370) (sz = 385)
     [[ Inlining would exceed -inline-max-size value (385>230) <1>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(807,3) inlined into d2q9-bgk.c(699,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between cells->speeds[ii+jj*params.nx][1] (817:7) and cells->speeds[ii+jj*params.nx][1] (817:7)
   remark #15346: vector dependence: assumed ANTI dependence between cells->speeds[ii+jj*params.nx][1] (817:7) and cells->speeds[ii+jj*params.nx][1] (817:7)
LOOP END

LOOP BEGIN at d2q9-bgk.c(847,3) inlined into d2q9-bgk.c(701,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between tmp_cells->speeds[ii+jj*params.nx][0] (863:7) and cells->speeds[x_w+y_n*params.nx][8] (871:7)
   remark #15346: vector dependence: assumed ANTI dependence between cells->speeds[x_w+y_n*params.nx][8] (871:7) and tmp_cells->speeds[ii+jj*params.nx][0] (863:7)

   LOOP BEGIN at d2q9-bgk.c(849,5) inlined into d2q9-bgk.c(701,3)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(1069,3) inlined into d2q9-bgk.c(702,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between cells->speeds[ii+jj*params.nx][1] (1081:9) and tmp_cells->speeds[ii+jj*params.nx][6] (1088:9)
   remark #15346: vector dependence: assumed ANTI dependence between tmp_cells->speeds[ii+jj*params.nx][6] (1088:9) and cells->speeds[ii+jj*params.nx][1] (1081:9)

   LOOP BEGIN at d2q9-bgk.c(1071,5) inlined into d2q9-bgk.c(702,3)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(703,3):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
d2q9-bgk.c(703,3):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
d2q9-bgk.c(703,3):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(698,1):remark #34051: REGISTER ALLOCATION : [timestep] d2q9-bgk.c:698

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   24[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm8]
        
    Routine temporaries
        Total         :     151
            Global    :      50
            Local     :     101
        Regenerable   :      12
        Spilled       :      16
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      80 bytes*
            Reads     :      13 [4.77e+01 ~ 2.1%]
            Writes    :      11 [3.51e+01 ~ 1.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: collision(const t_param, t_speed *, t_speed *, int *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (collision(const t_param, t_speed *, t_speed *, int *, int)) [17/29=58.6%] d2q9-bgk.c(1107,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(1131,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(1133,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at d2q9-bgk.c(1144,9)
         remark #15389: vectorization support: reference tmp_cells->speeds[ii+jj*params.nx][kk] has unaligned access   [ d2q9-bgk.c(1146,28) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 2.833
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 0.880 
         remark #15488: --- end vector cost summary ---
         remark #25436: completely unrolled by 9  
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(1199,9)
         remark #15389: vectorization support: reference d_equ[_2+5] has unaligned access
         remark #15389: vectorization support: reference u[_2+5] has unaligned access   [ d2q9-bgk.c(1199,48) ]
         remark #15389: vectorization support: reference u[_2+5] has unaligned access   [ d2q9-bgk.c(1200,45) ]
         remark #15389: vectorization support: reference u[_2+5] has unaligned access   [ d2q9-bgk.c(1200,52) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15427: loop was completely unrolled
         remark #15309: vectorization support: normalized vectorization overhead 0.071
         remark #15301: MATERIALIZED LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 3 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 95 
         remark #15477: vector cost: 21.000 
         remark #15478: estimated potential speedup: 4.220 
         remark #15486: divides: 2 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(1213,9)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between cells->speeds[ii+jj*params.nx][kk] (1215:11) and tmp_cells->speeds[ii+jj*params.nx][kk] (1215:11)
         remark #15346: vector dependence: assumed ANTI dependence between tmp_cells->speeds[ii+jj*params.nx][kk] (1215:11) and cells->speeds[ii+jj*params.nx][kk] (1215:11)
         remark #25436: completely unrolled by 9  
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(1107,1):remark #34051: REGISTER ALLOCATION : [collision] d2q9-bgk.c:1107

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   31[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     176
            Global    :      33
            Local     :     143
        Regenerable   :      16
        Spilled       :       7
        
    Routine stack
        Variables     :      72 bytes*
            Reads     :       3 [3.75e+01 ~ 1.7%]
            Writes    :      14 [1.75e+02 ~ 7.7%]
        Spills        :      40 bytes*
            Reads     :       5 [8.10e+00 ~ 0.4%]
            Writes    :       5 [8.10e+00 ~ 0.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: accelerate_flow(const t_param, t_speed *, int *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (accelerate_flow(const t_param, t_speed *, int *, int)) [18/29=62.1%] d2q9-bgk.c(780,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(807,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between cells->speeds[ii+jj*params.nx][1] (817:7) and cells->speeds[ii+jj*params.nx][1] (817:7)
   remark #15346: vector dependence: assumed ANTI dependence between cells->speeds[ii+jj*params.nx][1] (817:7) and cells->speeds[ii+jj*params.nx][1] (817:7)
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(780,1):remark #34051: REGISTER ALLOCATION : [accelerate_flow] d2q9-bgk.c:780

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm8]
        
    Routine temporaries
        Total         :      48
            Global    :      25
            Local     :      23
        Regenerable   :       6
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: propagate(const t_param, t_speed *, t_speed *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (propagate(const t_param, t_speed *, t_speed *, int)) [19/29=65.5%] d2q9-bgk.c(831,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(847,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between tmp_cells->speeds[ii+jj*params.nx][0] (863:7) and cells->speeds[x_w+y_n*params.nx][8] (871:7)
   remark #15346: vector dependence: assumed ANTI dependence between cells->speeds[x_w+y_n*params.nx][8] (871:7) and tmp_cells->speeds[ii+jj*params.nx][0] (863:7)

   LOOP BEGIN at d2q9-bgk.c(849,5)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(831,1):remark #34051: REGISTER ALLOCATION : [propagate] d2q9-bgk.c:831

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :      87
            Global    :      27
            Local     :      60
        Regenerable   :       5
        Spilled       :      14
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      88 bytes*
            Reads     :      11 [3.87e+01 ~ 2.4%]
            Writes    :      11 [2.79e+01 ~ 1.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: rebound(const t_param, t_speed *, t_speed *, int *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (rebound(const t_param, t_speed *, t_speed *, int *, int)) [20/29=69.0%] d2q9-bgk.c(1053,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(1069,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between cells->speeds[ii+jj*params.nx][1] (1081:9) and tmp_cells->speeds[ii+jj*params.nx][6] (1088:9)
   remark #15346: vector dependence: assumed ANTI dependence between tmp_cells->speeds[ii+jj*params.nx][6] (1088:9) and cells->speeds[ii+jj*params.nx][1] (1081:9)

   LOOP BEGIN at d2q9-bgk.c(1071,5)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(1053,1):remark #34051: REGISTER ALLOCATION : [rebound] d2q9-bgk.c:1053

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :      43
            Global    :      22
            Local     :      21
        Regenerable   :       5
        Spilled       :       8
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       6 [1.26e+01 ~ 2.4%]
            Writes    :       6 [1.26e+01 ~ 2.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: test_vels(const char *, float *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (test_vels(const char *, float *, int)) [21/29=72.4%] d2q9-bgk.c(1096,65)
  -> EXTERN: (1097,14) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (1100,5) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (1103,3) fclose(FILE *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(1098,3)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(1100,5) ]
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(1096,65):remark #34051: REGISTER ALLOCATION : [test_vels] d2q9-bgk.c:1096

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rsi rdi r12-r15 zmm0]
        
    Routine temporaries
        Total         :      26
            Global    :      12
            Local     :      14
        Regenerable   :       5
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      16 bytes*
            Reads     :       2 [1.80e+00 ~ 2.1%]
            Writes    :       2 [1.80e+00 ~ 2.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: finalise(const t_param *, t_speed **, t_speed **, int **, float **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (finalise(const t_param *, t_speed **, t_speed **, int **, float **)) [22/29=75.9%] d2q9-bgk.c(1450,1)
  -> EXTERN: (1454,3) free(void *)
  -> EXTERN: (1457,3) free(void *)
  -> EXTERN: (1460,3) free(void *)
  -> EXTERN: (1463,3) free(void *)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(1450,1):remark #34051: REGISTER ALLOCATION : [finalise] d2q9-bgk.c:1450

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rbx rbp rsi rdi r8 r12-r13]
        
    Routine temporaries
        Total         :      24
            Global    :      10
            Local     :      14
        Regenerable   :       1
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: calc_reynolds(const t_param, t_speed *, int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (calc_reynolds(const t_param, t_speed *, int *)) [23/29=79.3%] d2q9-bgk.c(1471,1)
  -> INLINE: (1474,12) av_velocity(const t_param, t_speed *, int *, int) (isz = 168) (sz = 181)
  -> INLINE: (1475,12) av_velocity(const t_param, t_speed *, int *, int) (isz = 168) (sz = 181)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(1250,3) inlined into d2q9-bgk.c(1474,12)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <obstacles[ii+$i1]>, stride is unknown to compiler   [ d2q9-bgk.c(1255,12) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][kk]>, masked, stride is unknown to compiler   [ d2q9-bgk.c(1262,28) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][1]>, masked, stride is unknown to compiler   [ d2q9-bgk.c(1266,22) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][5]>, masked, stride is unknown to compiler   [ d2q9-bgk.c(1267,25) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][8]>, masked, stride is unknown to compiler   [ d2q9-bgk.c(1268,25) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][3]>, masked, stride is unknown to compiler   [ d2q9-bgk.c(1269,26) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][6]>, masked, stride is unknown to compiler   [ d2q9-bgk.c(1270,28) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][7]>, masked, stride is unknown to compiler   [ d2q9-bgk.c(1271,28) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][2]>, masked, stride is unknown to compiler   [ d2q9-bgk.c(1274,22) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][5]>, masked, stride is unknown to compiler   [ d2q9-bgk.c(1275,25) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][6]>, masked, stride is unknown to compiler   [ d2q9-bgk.c(1276,25) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][4]>, masked, stride is unknown to compiler   [ d2q9-bgk.c(1277,26) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][7]>, masked, stride is unknown to compiler   [ d2q9-bgk.c(1278,28) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][8]>, masked, stride is unknown to compiler   [ d2q9-bgk.c(1279,28) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.025
   remark #15452: unmasked strided loads: 1 
   remark #15460: masked strided loads: 13 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 149 
   remark #15477: vector cost: 397.250 
   remark #15478: estimated potential speedup: 0.370 
   remark #15486: divides: 2 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at d2q9-bgk.c(1252,5) inlined into d2q9-bgk.c(1474,12)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][kk]>, masked, stride is 9   [ d2q9-bgk.c(1262,28) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][1]>, masked, stride is 9   [ d2q9-bgk.c(1266,22) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][5]>, masked, stride is 9   [ d2q9-bgk.c(1267,25) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][8]>, masked, stride is 9   [ d2q9-bgk.c(1268,25) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][3]>, masked, stride is 9   [ d2q9-bgk.c(1269,26) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][6]>, masked, stride is 9   [ d2q9-bgk.c(1270,28) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][7]>, masked, stride is 9   [ d2q9-bgk.c(1271,28) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][2]>, masked, stride is 9   [ d2q9-bgk.c(1274,22) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][5]>, masked, stride is 9   [ d2q9-bgk.c(1275,25) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][6]>, masked, stride is 9   [ d2q9-bgk.c(1276,25) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][4]>, masked, stride is 9   [ d2q9-bgk.c(1277,26) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][7]>, masked, stride is 9   [ d2q9-bgk.c(1278,28) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][8]>, masked, stride is 9   [ d2q9-bgk.c(1279,28) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.009
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15460: masked strided loads: 13 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 115 
      remark #15477: vector cost: 333.500 
      remark #15478: estimated potential speedup: 0.340 
      remark #15486: divides: 2 
      remark #15488: --- end vector cost summary ---

      LOOP BEGIN at d2q9-bgk.c(1260,9) inlined into d2q9-bgk.c(1474,12)
         remark #15389: vectorization support: reference cells->speeds[ii+jj*params.nx][kk] has unaligned access   [ d2q9-bgk.c(1262,28) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 2.833
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 0.880 
         remark #15488: --- end vector cost summary ---
         remark #25436: completely unrolled by 9  
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(1250,3) inlined into d2q9-bgk.c(1475,12)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <obstacles[ii+$i1]>, stride is unknown to compiler   [ d2q9-bgk.c(1255,12) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][kk]>, masked, stride is unknown to compiler   [ d2q9-bgk.c(1262,28) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][1]>, masked, stride is unknown to compiler   [ d2q9-bgk.c(1266,22) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][5]>, masked, stride is unknown to compiler   [ d2q9-bgk.c(1267,25) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][8]>, masked, stride is unknown to compiler   [ d2q9-bgk.c(1268,25) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][3]>, masked, stride is unknown to compiler   [ d2q9-bgk.c(1269,26) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][6]>, masked, stride is unknown to compiler   [ d2q9-bgk.c(1270,28) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][7]>, masked, stride is unknown to compiler   [ d2q9-bgk.c(1271,28) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][2]>, masked, stride is unknown to compiler   [ d2q9-bgk.c(1274,22) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][5]>, masked, stride is unknown to compiler   [ d2q9-bgk.c(1275,25) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][6]>, masked, stride is unknown to compiler   [ d2q9-bgk.c(1276,25) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][4]>, masked, stride is unknown to compiler   [ d2q9-bgk.c(1277,26) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][7]>, masked, stride is unknown to compiler   [ d2q9-bgk.c(1278,28) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][8]>, masked, stride is unknown to compiler   [ d2q9-bgk.c(1279,28) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.025
   remark #15452: unmasked strided loads: 1 
   remark #15460: masked strided loads: 13 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 149 
   remark #15477: vector cost: 397.500 
   remark #15478: estimated potential speedup: 0.370 
   remark #15486: divides: 2 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at d2q9-bgk.c(1252,5) inlined into d2q9-bgk.c(1475,12)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <obstacles[ii+$i1]>, stride is unknown to compiler   [ d2q9-bgk.c(1255,12) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][kk]>, masked, stride is unknown to compiler   [ d2q9-bgk.c(1262,28) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][1]>, masked, stride is unknown to compiler   [ d2q9-bgk.c(1266,22) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][5]>, masked, stride is unknown to compiler   [ d2q9-bgk.c(1267,25) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][8]>, masked, stride is unknown to compiler   [ d2q9-bgk.c(1268,25) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][3]>, masked, stride is unknown to compiler   [ d2q9-bgk.c(1269,26) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][6]>, masked, stride is unknown to compiler   [ d2q9-bgk.c(1270,28) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][7]>, masked, stride is unknown to compiler   [ d2q9-bgk.c(1271,28) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][2]>, masked, stride is unknown to compiler   [ d2q9-bgk.c(1274,22) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][5]>, masked, stride is unknown to compiler   [ d2q9-bgk.c(1275,25) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][6]>, masked, stride is unknown to compiler   [ d2q9-bgk.c(1276,25) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][4]>, masked, stride is unknown to compiler   [ d2q9-bgk.c(1277,26) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][7]>, masked, stride is unknown to compiler   [ d2q9-bgk.c(1278,28) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <cells->speeds[ii+jj*params.nx][8]>, masked, stride is unknown to compiler   [ d2q9-bgk.c(1279,28) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.025
      remark #15452: unmasked strided loads: 1 
      remark #15460: masked strided loads: 13 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 149 
      remark #15477: vector cost: 396.000 
      remark #15478: estimated potential speedup: 0.370 
      remark #15486: divides: 2 
      remark #15488: --- end vector cost summary ---

      LOOP BEGIN at d2q9-bgk.c(1260,9) inlined into d2q9-bgk.c(1475,12)
         remark #15389: vectorization support: reference cells->speeds[ii+jj*params.nx][kk] has unaligned access   [ d2q9-bgk.c(1262,28) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 2.833
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 0.880 
         remark #15488: --- end vector cost summary ---
         remark #25436: completely unrolled by 9  
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(1471,1):remark #34051: REGISTER ALLOCATION : [calc_reynolds] d2q9-bgk.c:1471

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   27[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm11]
        
    Routine temporaries
        Total         :     128
            Global    :      36
            Local     :      92
        Regenerable   :       5
        Spilled       :       6
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [9.00e-01 ~ 0.1%]
            Writes    :       1 [9.00e-01 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: total_density(const t_param, t_speed *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (total_density(const t_param, t_speed *)) [24/29=82.8%] d2q9-bgk.c(1481,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(1484,3)
   remark #25101: Loop Interchange not done due to: Original Order seems proper
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(1486,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at d2q9-bgk.c(1488,7)
         remark #15389: vectorization support: reference cells->speeds[ii+jj*params.nx][kk] has unaligned access   [ d2q9-bgk.c(1490,18) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.250
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 2.250 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(1488,7)
      <Remainder loop for vectorization>
         remark #25436: completely unrolled by 1  
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(1481,1):remark #34051: REGISTER ALLOCATION : [total_density] d2q9-bgk.c:1481

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm4]
        
    Routine temporaries
        Total         :      32
            Global    :      19
            Local     :      13
        Regenerable   :       3
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: write_values(const t_param, t_speed *, int *, float *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (write_values(const t_param, t_speed *, int *, float *)) [25/29=86.2%] d2q9-bgk.c(1499,1)
  -> EXTERN: (1508,8) fopen(const char *__restrict__, const char *__restrict__)
  -> INLINE: (1512,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1585,3) fflush(FILE *)
    -> EXTERN: (1586,3) exit(int)
  -> EXTERN: (1558,7) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (1562,3) fclose(FILE *)
  -> EXTERN: (1564,8) fopen(const char *__restrict__, const char *__restrict__)
  -> INLINE: (1568,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1585,3) fflush(FILE *)
    -> EXTERN: (1586,3) exit(int)
  -> EXTERN: (1573,5) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (1576,3) fclose(FILE *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(1515,3)
   remark #25095: Loop Interchange not done due to: User Function Inside Loop Nest
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(1558,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (1558:7) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (1558:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (1558:7) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (1558:7)

   LOOP BEGIN at d2q9-bgk.c(1517,5)
      remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(1558,7) ]

      LOOP BEGIN at d2q9-bgk.c(1530,9)
         remark #25436: completely unrolled by 9   (pre-vector) 
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(1571,3)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(1573,5) ]
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(1499,1):remark #34051: REGISTER ALLOCATION : [write_values] d2q9-bgk.c:1499

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r15 zmm0-zmm9]
        
    Routine temporaries
        Total         :     145
            Global    :      38
            Local     :     107
        Regenerable   :      46
        Spilled       :      13
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      64 bytes*
            Reads     :       9 [8.23e+01 ~ 5.9%]
            Writes    :       8 [2.16e+01 ~ 1.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: die(const char *, const int, const char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (die(const char *, const int, const char *)) [26/29=89.7%] d2q9-bgk.c(1582,1)
  -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (1585,3) fflush(FILE *)
  -> EXTERN: (1586,3) exit(int)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(1582,1):remark #34051: REGISTER ALLOCATION : [die] d2q9-bgk.c:1582

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rbx rsi rdi]
        
    Routine temporaries
        Total         :      28
            Global    :       1
            Local     :      27
        Regenerable   :       7
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: usage(const char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (usage(const char *)) [27/29=93.1%] d2q9-bgk.c(1590,1)
  -> EXTERN: (1591,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (1592,3) exit(int)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(1590,1):remark #34051: REGISTER ALLOCATION : [usage] d2q9-bgk.c:1590

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rsi rdi]
        
    Routine temporaries
        Total         :      15
            Global    :       0
            Local     :      15
        Regenerable   :       4
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: initialise(const char *, const char *, t_param *, t_speed **, t_speed **, int **, float **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (initialise(const char *, const char *, t_param *, t_speed **, t_speed **, int **, float **)) [28/29=96.6%] d2q9-bgk.c(1296,1)
  -> EXTERN: (1304,8) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (1308,5) sprintf(char *__restrict__, const char *__restrict__, ...)
  -> INLINE: (1309,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1585,3) fflush(FILE *)
    -> EXTERN: (1586,3) exit(int)
  -> EXTERN: (1313,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (1315,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1585,3) fflush(FILE *)
    -> EXTERN: (1586,3) exit(int)
  -> EXTERN: (1317,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (1319,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1585,3) fflush(FILE *)
    -> EXTERN: (1586,3) exit(int)
  -> EXTERN: (1321,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (1323,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1585,3) fflush(FILE *)
    -> EXTERN: (1586,3) exit(int)
  -> EXTERN: (1325,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (1327,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1585,3) fflush(FILE *)
    -> EXTERN: (1586,3) exit(int)
  -> EXTERN: (1329,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (1331,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1585,3) fflush(FILE *)
    -> EXTERN: (1586,3) exit(int)
  -> EXTERN: (1333,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (1335,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1585,3) fflush(FILE *)
    -> EXTERN: (1586,3) exit(int)
  -> EXTERN: (1337,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (1339,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1585,3) fflush(FILE *)
    -> EXTERN: (1586,3) exit(int)
  -> EXTERN: (1342,3) fclose(FILE *)
  -> EXTERN: (1364,26) malloc(size_t)
  -> INLINE: (1366,27) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1585,3) fflush(FILE *)
    -> EXTERN: (1586,3) exit(int)
  -> EXTERN: (1369,30) malloc(size_t)
  -> INLINE: (1371,31) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1585,3) fflush(FILE *)
    -> EXTERN: (1586,3) exit(int)
  -> EXTERN: (1374,20) malloc(size_t)
  -> INLINE: (1376,31) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1585,3) fflush(FILE *)
    -> EXTERN: (1586,3) exit(int)
  -> EXTERN: (1412,8) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (1416,5) sprintf(char *__restrict__, const char *__restrict__, ...)
  -> INLINE: (1417,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1585,3) fflush(FILE *)
    -> EXTERN: (1586,3) exit(int)
  -> EXTERN: (1421,20) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (1421,20) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (1424,22) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1585,3) fflush(FILE *)
    -> EXTERN: (1586,3) exit(int)
  -> INLINE: (1426,40) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1585,3) fflush(FILE *)
    -> EXTERN: (1586,3) exit(int)
  -> INLINE: (1428,40) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1585,3) fflush(FILE *)
    -> EXTERN: (1586,3) exit(int)
  -> INLINE: (1430,23) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1585,3) fflush(FILE *)
    -> EXTERN: (1586,3) exit(int)
  -> EXTERN: (1437,3) fclose(FILE *)
  -> EXTERN: (1443,26) malloc(size_t)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(1383,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(1385,5)
   <Distributed chunk1>
      remark #25426: Loop Distributed (6 way) 
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <*cells_ptr->speeds[ii+jj*params->nx][4]>, stride is 9   [ d2q9-bgk.c(1393,9) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.043
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 8.750 
      remark #15478: estimated potential speedup: 0.340 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(1385,5)
   <Remainder, Distributed chunk1>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(1385,5)
   <Distributed chunk2>
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <*cells_ptr->speeds[ii+jj*params->nx][3]>, stride is 9   [ d2q9-bgk.c(1392,9) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.043
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 8.750 
      remark #15478: estimated potential speedup: 0.340 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(1385,5)
   <Remainder, Distributed chunk2>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(1385,5)
   <Distributed chunk3>
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <*cells_ptr->speeds[ii+jj*params->nx][2]>, stride is 9   [ d2q9-bgk.c(1391,9) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.043
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 8.750 
      remark #15478: estimated potential speedup: 0.340 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(1385,5)
   <Remainder, Distributed chunk3>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(1385,5)
   <Distributed chunk4>
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <*cells_ptr->speeds[ii+jj*params->nx][1]>, stride is 9   [ d2q9-bgk.c(1390,9) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.043
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 8.750 
      remark #15478: estimated potential speedup: 0.340 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(1385,5)
   <Remainder, Distributed chunk4>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(1385,5)
   <Distributed chunk5>
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <*cells_ptr->speeds[ii+jj*params->nx][0]>, stride is 9   [ d2q9-bgk.c(1388,9) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.043
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 8.750 
      remark #15478: estimated potential speedup: 0.340 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(1385,5)
   <Remainder, Distributed chunk5>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(1385,5)
   <Distributed chunk6>
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25439: unrolled with remainder by 2  

      LOOP BEGIN at d2q9-bgk.c(1395,9)
         remark #15389: vectorization support: reference *cells_ptr->speeds[ii+jj*params->nx][_2+5] has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15427: loop was completely unrolled
         remark #15309: vectorization support: normalized vectorization overhead 1.200
         remark #15301: MATERIALIZED LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 3 
         remark #15477: vector cost: 1.250 
         remark #15478: estimated potential speedup: 1.090 
         remark #15488: --- end vector cost summary ---
      LOOP END
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(1385,5)
   <Remainder, Distributed chunk6>
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(1403,3)
   remark #15523: loop was not vectorized: loop control variable jj was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at d2q9-bgk.c(1405,5)
      remark #15523: loop was not vectorized: loop control variable ii was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 8  
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(1421,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(1296,1):remark #34051: REGISTER ALLOCATION : [initialise] d2q9-bgk.c:1296

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :     534
            Global    :      83
            Local     :     451
        Regenerable   :     239
        Spilled       :       7
        
    Routine stack
        Variables     :    1036 bytes*
            Reads     :       3 [1.63e+01 ~ 1.1%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [3.70e-02 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: initialise_params_from_file(const char *, t_param *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (initialise_params_from_file(const char *, t_param *)) [29/29=100.0%] d2q9-bgk.c(650,74)
  -> EXTERN: (656,8) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (660,5) sprintf(char *__restrict__, const char *__restrict__, ...)
  -> INLINE: (661,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1585,3) fflush(FILE *)
    -> EXTERN: (1586,3) exit(int)
  -> EXTERN: (665,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (667,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1585,3) fflush(FILE *)
    -> EXTERN: (1586,3) exit(int)
  -> EXTERN: (669,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (671,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1585,3) fflush(FILE *)
    -> EXTERN: (1586,3) exit(int)
  -> EXTERN: (673,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (675,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1585,3) fflush(FILE *)
    -> EXTERN: (1586,3) exit(int)
  -> EXTERN: (677,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (679,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1585,3) fflush(FILE *)
    -> EXTERN: (1586,3) exit(int)
  -> EXTERN: (681,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (683,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1585,3) fflush(FILE *)
    -> EXTERN: (1586,3) exit(int)
  -> EXTERN: (685,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (687,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1585,3) fflush(FILE *)
    -> EXTERN: (1586,3) exit(int)
  -> EXTERN: (689,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (691,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1583,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1584,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1585,3) fflush(FILE *)
    -> EXTERN: (1586,3) exit(int)
  -> EXTERN: (694,3) fclose(FILE *)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(650,74):remark #34051: REGISTER ALLOCATION : [initialise_params_from_file] d2q9-bgk.c:650

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rbx rbp rsi rdi r12]
        
    Routine temporaries
        Total         :     215
            Global    :      27
            Local     :     188
        Regenerable   :     118
        Spilled       :       3
        
    Routine stack
        Variables     :    1024 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The function is larger than the inliner would normally inline.  Use the
    option -inline-max-size to increase the size of any function that would
    normally be inlined, add "inline __attribute__((always_inline))" to the
    declaration of the called function, or add "#pragma forceinline" before
    the call site.

<2> The compiler's heuristics predict that it is not profitable to inline the
    call.  Add "inline __attribute__((always_inline))" to the declaration of
    the called function or add "#pragma forceinline" before the call site.

